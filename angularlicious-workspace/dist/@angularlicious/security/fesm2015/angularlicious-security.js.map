{"version":3,"file":"angularlicious-security.js.map","sources":["ng://@angularlicious/security/lib/business/actions/security-action-base.action.ts","ng://@angularlicious/security/lib/business/actions/register-subscriber.action.ts","ng://@angularlicious/security/lib/business/security-api.service.ts","ng://@angularlicious/security/lib/business/security-business-provider.service.ts","ng://@angularlicious/security/lib/models/subscriber.model.ts","ng://@angularlicious/security/lib/security.service.ts","ng://@angularlicious/security/lib/components/register-subscriber/register-subscriber.component.ts","ng://@angularlicious/security/lib/security.module.ts"],"sourcesContent":["import { SecurityBusinessProviderService } from './../../business/security-business-provider.service';\r\nimport { AngularliciousLoggingService } from '@angularlicious/logging';\r\nimport { ActionBase } from '@angularlicious/foundation';\r\n\r\nexport class SecurityActionBase extends ActionBase {\r\n  businessProvider: SecurityBusinessProviderService;\r\n  loggingService: AngularliciousLoggingService;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Use the [Do] method to perform the action.\r\n   */\r\n  Do(businessProvider: SecurityBusinessProviderService) {\r\n    this.businessProvider = businessProvider;\r\n    this.serviceContext = businessProvider.serviceContext;\r\n    this.loggingService = businessProvider.loggingService;\r\n\r\n    this.execute();\r\n  }\r\n}\r\n","import * as rules from '@angularlicious/rules-engine';\r\nimport { Severity } from '@angularlicious/logging';\r\nimport { Subscriber } from '../../models/subscriber.model';\r\nimport { SecurityActionBase } from './security-action-base.action';\r\n\r\nexport class RegisterSubscriberAction extends SecurityActionBase {\r\n  constructor(private subscriber: Subscriber) {\r\n    super();\r\n    this.actionName = 'RegisterSubscriberAction';\r\n  }\r\n\r\n  /**\r\n   * Override this method from the base [Action] class to allow for rules to be added to the\r\n   * action's [ValidationContext]. Any rules added to the [ValidationContext] here will be executed when\r\n   * the action's [ValidateAction] method is called - this method is just one of many pipeline methods\r\n   * of the [Action] framework.\r\n   */\r\n  preValidateAction() {\r\n    console.log(\r\n      `Running the [preValidateAction] for the ${this.actionName} action.`\r\n    );\r\n    this.validationContext\r\n      .withSource(this.actionName)\r\n      .addRule(\r\n        new rules.StringIsNotNullEmptyRange(\r\n          'NameIsValid',\r\n          'The name value is not valid. Must be between 1-40 characters.',\r\n          this.subscriber.Name,\r\n          2,\r\n          40,\r\n          true\r\n        )\r\n      )\r\n      .addRule(\r\n        new rules.StringIsNotNullEmptyRange(\r\n          'EmailIsValid',\r\n          'The email address value is not valid. Must be between 5-60 characters.',\r\n          this.subscriber.EmailAddress,\r\n          5,\r\n          60,\r\n          true\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Use this method to provide business logic implementation - this method is allowed to execute only if the current action\r\n   * does not contain any rule violations.\r\n   */\r\n  performAction() {\r\n    this.loggingService.log(this.actionName, Severity.Information, `Running the [performAction] for the ${this.actionName}.`);\r\n    this.response = this.businessProvider.securityApiService.registerSubscriber(this.subscriber);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { HttpBaseService, ServiceResponse } from '@angularlicious/foundation';\r\nimport {\r\n  AngularliciousLoggingService,\r\n  Severity\r\n} from '@angularlicious/logging';\r\nimport { Subscriber } from '../models/subscriber.model';\r\nimport { HttpRequestMethod } from '@angularlicious/foundation';\r\n\r\n@Injectable()\r\nexport class SecurityApiService extends HttpBaseService {\r\n  constructor(\r\n    http: HttpClient,\r\n    public httpService: HttpBaseService,\r\n    loggingService: AngularliciousLoggingService\r\n  ) {\r\n    super(http, loggingService);\r\n  }\r\n\r\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    const requestUrl = 'api/subscriber/register';\r\n    const message = `${this.serviceName} preparing to call: ${requestUrl}`;\r\n    this.loggingService.log(this.serviceName, Severity.Information, message);\r\n\r\n    const body = JSON.stringify(subscriber);\r\n    const options = this.httpService.createRequestOptions(\r\n      HttpRequestMethod.post,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body\r\n    );\r\n    return this.httpService.post(options);\r\n\r\n    /**TEMPORARY IMPLEMENTATION */\r\n    // const response = new ServiceResponse();\r\n    // response.IsSuccess = true;\r\n    // response.Message = `Fake message from ${this.serviceName}`;\r\n    // response.Data = true;\r\n    // const subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n    // return subject.asObservable();\r\n    /**TEMPORARY IMPLEMENTATION */\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpResponse } from '@angular/common/http';\r\n\r\nimport { ServiceBase, ServiceResponse } from '@angularlicious/foundation';\r\nimport {\r\n  LoggingServiceConfig,\r\n  AngularliciousLoggingService\r\n} from '@angularlicious/logging';\r\nimport { RegisterSubscriberAction } from './actions/register-subscriber.action';\r\nimport { Subscriber } from '../models/subscriber.model';\r\nimport { SecurityApiService } from './security-api.service';\r\n\r\n@Injectable()\r\nexport class SecurityBusinessProviderService extends ServiceBase {\r\n  constructor(\r\n    loggingService: AngularliciousLoggingService,\r\n    public securityApiService: SecurityApiService\r\n  ) {\r\n    super(loggingService);\r\n  }\r\n\r\n  /**\r\n   * Use action to register a new subscriber.\r\n   * @param subscriber\r\n   */\r\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    const action = new RegisterSubscriberAction(subscriber);\r\n    action.Do(this);\r\n    return action.response;\r\n  }\r\n}\r\n","export class Subscriber {\r\n  Name: string;\r\n  EmailAddress: string;\r\n  SubscriptionStart: Date = new Date();\r\n\r\n  /**\r\n   * Use to create a new subscriber for the application. This is not an account - only\r\n   * a subscription to resources from the application.\r\n   * @param subscriberName\\\r\n   * @param subscriberEmail\r\n   */\r\n  constructor(subscriberName: string, subscriberEmail: string) {\r\n    this.Name = subscriberName;\r\n    this.EmailAddress = subscriberEmail;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ServiceBase, ServiceResponse } from '@angularlicious/foundation';\r\nimport {\r\n  AngularliciousLoggingService,\r\n  Severity\r\n} from '@angularlicious/logging';\r\nimport { SecurityBusinessProviderService } from './business/security-business-provider.service';\r\nimport { Subscriber } from './models/subscriber.model';\r\n\r\n@Injectable()\r\nexport class AngularliciousSecurityService extends ServiceBase {\r\n  constructor(\r\n    loggingService: AngularliciousLoggingService,\r\n    private businessProvider: SecurityBusinessProviderService\r\n  ) {\r\n    super(loggingService);\r\n    this.serviceName = 'AngularliciousSecurityService';\r\n    this.businessProvider.serviceContext = this.serviceContext;\r\n    this.businessProvider.loggingService = this.loggingService;\r\n  }\r\n\r\n  /**\r\n   * Use to register a new subscriber to the application.\r\n   * @param subscriber contains the user name and email address for the subscriber.\r\n   */\r\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    const message = `Preparing to register subscriber: ${JSON.stringify(\r\n      subscriber\r\n    )}`;\r\n    this.loggingService.log(this.serviceName, Severity.Information, message);\r\n    return this.businessProvider.registerSubscriber(subscriber);\r\n  }\r\n\r\n  /**\r\n   * Use to verify the specified service.\r\n   */\r\n  verifyService(): boolean {\r\n    if (\r\n      this.loggingService &&\r\n      this.businessProvider &&\r\n      this.businessProvider.securityApiService\r\n    )\r\n      return true;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ComponentBase } from '@angularlicious/foundation';\r\nimport {\r\n  AngularliciousLoggingService,\r\n  Severity\r\n} from '@angularlicious/logging';\r\nimport { Subscriber } from '../../models/subscriber.model';\r\nimport { AngularliciousSecurityService } from '../../security.service';\r\nimport { ServiceResponse, ErrorResponse } from '@angularlicious/foundation';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'bm-register-subscriber',\r\n  templateUrl: './register-subscriber.component.html',\r\n  styleUrls: ['./register-subscriber.component.css']\r\n})\r\nexport class RegisterSubscriberComponent extends ComponentBase\r\n  implements OnInit {\r\n  @Output() subscribe = new EventEmitter<ServiceResponse>();\r\n  _form: FormGroup;\r\n  subscriber: Subscriber;\r\n\r\n  constructor(\r\n    private securityService: AngularliciousSecurityService,\r\n    loggingService: AngularliciousLoggingService,\r\n    public formBuilder: FormBuilder,\r\n    router: Router\r\n  ) {\r\n    super('RegisterSubscriberComponent', loggingService, router);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm(): void {\r\n    this._form = this.formBuilder.group({\r\n      subscriberName: ['', Validators.required],\r\n      emailAddress: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  submitForm() {\r\n    this.securityService.resetServiceContext();\r\n    this.subscriber = new Subscriber(\r\n      this._form.value.subscriberName,\r\n      this._form.value.emailAddress\r\n    );\r\n    this.subscribeUser(this.subscriber);\r\n  }\r\n\r\n  subscribeUser(subscriber: Subscriber) {\r\n    this.securityService\r\n      .registerSubscriber(subscriber)\r\n      .subscribe(\r\n        (response: ServiceResponse) => this.handleSubscribeUser(response),\r\n        error =>\r\n          this.handleServiceErrors(error, this.securityService.serviceContext),\r\n        () => this.finishRequest(this.componentName)\r\n      );\r\n  }\r\n\r\n  handleSubscribeUser(response: ServiceResponse) {\r\n    const functionName = 'handleSubscribeUser';\r\n    const logMessage = `[${functionName}]: Preparing to handle the response from the [SecurityService] in the ${\r\n      this.componentName\r\n    }.`;\r\n    this.loggingService.log(\r\n      this.componentName,\r\n      Severity.Information,\r\n      logMessage\r\n    );\r\n    if (response) {\r\n      if (response.IsSuccess) {\r\n        const successMessage = `Successfully processed request to create subscriber. Prepare to download...`;\r\n        this.loggingService.log(\r\n          this.componentName,\r\n          Severity.Information,\r\n          successMessage\r\n        );\r\n        this.subscribe.emit(response as ServiceResponse);\r\n      } else {\r\n        this.handleServiceErrors(\r\n          // response as ErrorResponse,\r\n          null,\r\n          this.securityService.serviceContext\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  AngularliciousLoggingModule,\r\n  AngularliciousLoggingService\r\n} from '@angularlicious/logging';\r\nimport { AngularliciousFoundationModule } from '@angularlicious/foundation';\r\nimport { AngularliciousCoreModule } from '@angularlicious/core';\r\nimport { SecurityBusinessProviderService } from './business/security-business-provider.service';\r\nimport { SecurityApiService } from './business/security-api.service';\r\nimport { RegisterSubscriberComponent } from './components/register-subscriber/register-subscriber.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AngularliciousRulesEngineModule } from '@angularlicious/rules-engine';\r\nimport { LoggingConfig } from '@angularlicious/configuration';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AngularliciousLoggingModule,\r\n    AngularliciousFoundationModule,\r\n    AngularliciousCoreModule,\r\n    AngularliciousRulesEngineModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [RegisterSubscriberComponent],\r\n  exports: [RegisterSubscriberComponent],\r\n  providers: [\r\n    AngularliciousLoggingService,\r\n    SecurityApiService, //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\r\n    SecurityBusinessProviderService //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\r\n  ]\r\n})\r\nexport class AngularliciousSecurityModule {\r\n  static forRoot(config: LoggingConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: AngularliciousSecurityModule,\r\n      providers: [\r\n        {\r\n          provide: LoggingConfig,\r\n          useValue: config\r\n        },\r\n        HttpClientModule\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"names":["rules.StringIsNotNullEmptyRange"],"mappings":"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"}
