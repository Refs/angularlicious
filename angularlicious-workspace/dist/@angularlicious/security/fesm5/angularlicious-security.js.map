{"version":3,"file":"angularlicious-security.js.map","sources":["ng://@angularlicious/security/lib/business/actions/security-action-base.action.ts","ng://@angularlicious/security/lib/business/actions/register-subscriber.action.ts","ng://@angularlicious/security/lib/business/security-api.service.ts","ng://@angularlicious/security/lib/business/security-business-provider.service.ts","ng://@angularlicious/security/lib/models/subscriber.model.ts","ng://@angularlicious/security/lib/security.service.ts","ng://@angularlicious/security/lib/components/register-subscriber/register-subscriber.component.ts","ng://@angularlicious/security/lib/security.module.ts"],"sourcesContent":["import { SecurityBusinessProviderService } from './../../business/security-business-provider.service';\nimport { AngularliciousLoggingService } from '@angularlicious/logging';\nimport { ActionBase } from '@angularlicious/foundation';\n\nexport class SecurityActionBase extends ActionBase {\n  businessProvider: SecurityBusinessProviderService;\n  loggingService: AngularliciousLoggingService;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Use the [Do] method to perform the action.\n   */\n  Do(businessProvider: SecurityBusinessProviderService) {\n    // Provide the [SecurityBusinessProviderService], [ServiceContext], and [LoggingService] to action;\n    this.businessProvider = businessProvider;\n    this.serviceContext = businessProvider.serviceContext;\n    this.loggingService = businessProvider.loggingService;\n\n    this.execute();\n  }\n}\n","import { Observable } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs';\n\n// // import { Response } from '@angular/http';\nimport { ActionResult } from '@angularlicious/actions';\nimport * as rules from '@angularlicious/rules-engine';\n\nimport {\n  HttpBaseService,\n  ServiceResponse,\n  ErrorResponse\n} from '@angularlicious/foundation';\nimport { Severity } from '@angularlicious/logging';\n\nimport { Subscriber } from './../../models/subscriber.model';\nimport { SecurityActionBase } from './security-action-base.action';\nimport { HttpResponse } from '@angular/common/http';\n\nexport class RegisterSubscriberAction extends SecurityActionBase {\n  constructor(private subscriber: Subscriber) {\n    super();\n    this.actionName = 'RegisterSubscriberAction';\n  }\n\n  /**\n   * Override this method from the base [Action] class to allow for rules to be added to the\n   * action's [ValidationContext]. Any rules added to the [ValidationContext] here will be executed when\n   * the action's [ValidateAction] method is called - this method is just one of many pipeline methods\n   * of the [Action] framework.\n   */\n  preValidateAction() {\n    console.log(\n      `Running the [preValidateAction] for the ${this.actionName} action.`\n    );\n    this.validationContext\n      .withSource(this.actionName)\n      .addRule(\n        new rules.StringIsNotNullEmptyRange(\n          'NameIsValid',\n          'The name value is not valid. Must be between 1-40 characters.',\n          this.subscriber.Name,\n          2,\n          40,\n          true\n        )\n      )\n      .addRule(\n        new rules.StringIsNotNullEmptyRange(\n          'EmailIsValid',\n          'The email address value is not valid. Must be between 5-60 characters.',\n          this.subscriber.EmailAddress,\n          5,\n          60,\n          true\n        )\n      );\n  }\n\n  /**\n   * Use this method to provide business logic implementation - this method is allowed to execute only if the current action\n   * does not contain any rule violations.\n   */\n  performAction() {\n    this.loggingService.log(\n      this.actionName,\n      Severity.Information,\n      `Running the [performAction] for the ${this.actionName}.`\n    );\n    this.response = this.businessProvider.securityApiService.registerSubscriber(\n      this.subscriber\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n// import 'rxjs/add/operator/map';\n// import 'rxjs/add/operator/catch';\n// import 'rxjs/add/operator/observeOn';\n// import 'rxjs/add/operator/toPromise';\nimport { Observable } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { HttpBaseService, ServiceResponse } from '@angularlicious/foundation';\nimport {\n  AngularliciousLoggingService,\n  Severity\n} from '@angularlicious/logging';\nimport { Subscriber } from './../models/subscriber.model';\nimport { HttpRequestMethod } from '@angularlicious/foundation';\n\n@Injectable()\nexport class SecurityApiService extends HttpBaseService {\n  constructor(\n    http: HttpClient,\n    public httpService: HttpBaseService,\n    loggingService: AngularliciousLoggingService\n  ) {\n    super(http, loggingService);\n  }\n\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\n    const requestUrl = 'api/subscriber/register';\n    const message = `${this.serviceName} preparing to call: ${requestUrl}`;\n    this.loggingService.log(this.serviceName, Severity.Information, message);\n\n    const body = JSON.stringify(subscriber);\n    const options = this.httpService.createRequestOptions(\n      HttpRequestMethod.POST,\n      this.httpService.createHeader(false),\n      requestUrl,\n      body\n    );\n    return this.httpService.get(options);\n\n    /**TEMPORARY IMPLEMENTATION */\n    // const response = new ServiceResponse();\n    // response.IsSuccess = true;\n    // response.Message = `Fake message from ${this.serviceName}`;\n    // response.Data = true;\n    // const subject: BehaviorSubject<any> = new BehaviorSubject(response);\n    // return subject.asObservable();\n    /**TEMPORARY IMPLEMENTATION */\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpResponse } from '@angular/common/http';\n\nimport { ServiceBase, ServiceResponse } from '@angularlicious/foundation';\nimport {\n  LoggingServiceConfig,\n  AngularliciousLoggingService\n} from '@angularlicious/logging';\nimport { RegisterSubscriberAction } from './actions/register-subscriber.action';\nimport { Subscriber } from './../models/subscriber.model';\nimport { SecurityApiService } from './security-api.service';\n\n@Injectable()\nexport class SecurityBusinessProviderService extends ServiceBase {\n  constructor(\n    loggingService: AngularliciousLoggingService,\n    public securityApiService: SecurityApiService\n  ) {\n    super(loggingService);\n  }\n\n  /**\n   * Use action to register a new subscriber.\n   * @param subscriber\n   */\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\n    const action = new RegisterSubscriberAction(subscriber);\n    action.Do(this);\n    return action.response;\n  }\n}\n","export class Subscriber {\n  Name: string;\n  EmailAddress: string;\n  SubscriptionStart: Date = new Date();\n\n  /**\n   * Use to create a new subscriber for the application. This is not an account - only\n   * a subscription to resources from the application.\n   * @param subscriberName\\\n   * @param subscriberEmail\n   */\n  constructor(subscriberName: string, subscriberEmail: string) {\n    this.Name = subscriberName;\n    this.EmailAddress = subscriberEmail;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ServiceBase, ServiceResponse } from '@angularlicious/foundation';\nimport {\n  AngularliciousLoggingService,\n  Severity\n} from '@angularlicious/logging';\nimport { SecurityBusinessProviderService } from './business/security-business-provider.service';\nimport { Subscriber } from './models/subscriber.model';\n\n// import { Subscriber } from './models/subscriber.model';\n// import { SubscriberBusinessProviderService } from './business/subscriber-business-provider.service';\n// import { ConfirmationToken } from './models/confirmation-token.model';\n\n@Injectable()\nexport class AngularliciousSecurityService extends ServiceBase {\n  constructor(\n    loggingService: AngularliciousLoggingService,\n    private businessProvider: SecurityBusinessProviderService\n  ) {\n    super(loggingService);\n    this.serviceName = 'AngularliciousSecurityService';\n    this.businessProvider.serviceContext = this.serviceContext;\n    this.businessProvider.loggingService = this.loggingService;\n  }\n\n  /**\n   * Use to register a new subscriber to the application.\n   * @param subscriber contains the user name and email address for the subscriber.\n   */\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\n    const message = `Preparing to register subscriber: ${JSON.stringify(\n      subscriber\n    )}`;\n    this.loggingService.log(this.serviceName, Severity.Information, message);\n    return this.businessProvider.registerSubscriber(subscriber);\n  }\n\n  // /**\n  //  * Use to confirm a new subscriber.\n  //  * @param confirmationToken contains the user name and a [Hash] value that is used to confirm the user.\n  //  */\n  // confirmSubscriber(confirmationToken: ConfirmationToken) {\n  //   this.loggingService.log(this.serviceName, Severity.Information, `Preparing to confirm subscriber.`);\n  //   return this.businessProvider.confirmSubscriber(confirmationToken)\n  // }\n\n  verifyService(): boolean {\n    if (\n      this.loggingService &&\n      this.businessProvider &&\n      this.businessProvider.securityApiService\n    )\n      return true;\n  }\n}\n","import {\n  Component,\n  OnInit,\n  Output,\n  ViewChild,\n  EventEmitter\n} from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ComponentBase } from '@angularlicious/foundation';\nimport {\n  AngularliciousLoggingService,\n  Severity\n} from '@angularlicious/logging';\nimport { Subscriber } from './../../models/subscriber.model';\nimport { AngularliciousSecurityService } from './../../security.service';\nimport { ServiceResponse, ErrorResponse } from '@angularlicious/foundation';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'bm-register-subscriber',\n  template: `<angularlicious-alert [alertNotification]=\"alertNotification\" [hasMessage]=\"alertNotification.showAlert\"></angularlicious-alert>\n<!-- SUBSCRIBE SIGN-UP FORM -->\n<form [formGroup]=\"_form\" (ngSubmit)=\"submitForm()\">\n  <!-- SUBSCRIBER NAME -->\n  <div class=\"input-group form-group-no-border\">\n    <span class=\"input-group-addon\">\n      <i class=\"now-ui-icons users_circle-08\"></i>\n    </span>\n    <input type=\"text\" formControlName=\"subscriberName\" class=\"form-control\" placeholder=\"Name...\">\n  </div>\n  <!-- SUBSCRIBER EMAIL -->\n  <div class=\"input-group form-group-no-border\">\n    <span class=\"input-group-addon\">\n      <i class=\"now-ui-icons ui-1_email-85\"></i>\n    </span>\n    <input type=\"text\" formControlName=\"emailAddress\" class=\"form-control\" placeholder=\"Email...\">\n  </div>\n  <!-- SUBSCRIBE BUTTON -->\n  <button class=\"btn btn-neutral btn-round btn-lg\">Subscribe\n    <i class=\"fa fa-check ml-1\"></i>\n  </button>\n</form>\n<!-- SUBSCRIBE SIGN-UP FORM -->`,\n  styles: [``]\n})\nexport class RegisterSubscriberComponent extends ComponentBase\n  implements OnInit {\n  @Output() subscribe = new EventEmitter<ServiceResponse>();\n  _form: FormGroup;\n  subscriber: Subscriber;\n\n  constructor(\n    private securityService: AngularliciousSecurityService,\n    loggingService: AngularliciousLoggingService,\n    public formBuilder: FormBuilder,\n    router: Router\n  ) {\n    super('RegisterSubscriberComponent', loggingService, router);\n  }\n\n  ngOnInit() {\n    this.buildForm();\n  }\n\n  buildForm(): void {\n    this._form = this.formBuilder.group({\n      subscriberName: ['', Validators.required],\n      emailAddress: ['', Validators.required]\n    });\n  }\n\n  submitForm() {\n    this.securityService.resetServiceContext();\n    this.subscriber = new Subscriber(\n      this._form.value.subscriberName,\n      this._form.value.emailAddress\n    );\n    this.subscribeUser(this.subscriber);\n  }\n\n  subscribeUser(subscriber: Subscriber) {\n    this.securityService\n      .registerSubscriber(subscriber)\n      .subscribe(\n        (response: ServiceResponse) => this.handleSubscribeUser(response),\n        error =>\n          this.handleServiceErrors(error, this.securityService.serviceContext),\n        () => this.finishRequest(this.componentName)\n      );\n  }\n\n  handleSubscribeUser(response: ServiceResponse) {\n    const functionName = 'handleSubscribeUser';\n    const logMessage = `[${functionName}]: Preparing to handle the response from the [SecurityService] in the ${\n      this.componentName\n    }.`;\n    this.loggingService.log(\n      this.componentName,\n      Severity.Information,\n      logMessage\n    );\n    if (response) {\n      if (response.IsSuccess) {\n        const successMessage = `Successfully processed request to create subscriber. Prepare to download...`;\n        this.loggingService.log(\n          this.componentName,\n          Severity.Information,\n          successMessage\n        );\n        this.subscribe.emit(response as ServiceResponse);\n      } else {\n        this.handleServiceErrors(\n          // response as ErrorResponse,\n          null,\n          this.securityService.serviceContext\n        );\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  AngularliciousLoggingModule,\n  AngularliciousLoggingService\n} from '@angularlicious/logging';\nimport { AngularliciousFoundationModule } from '@angularlicious/foundation';\nimport { AngularliciousCoreModule } from '@angularlicious/core';\nimport { SecurityBusinessProviderService } from './business/security-business-provider.service';\nimport { SecurityApiService } from './business/security-api.service';\nimport { RegisterSubscriberComponent } from './components/register-subscriber/register-subscriber.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HttpBaseService } from '@angularlicious/foundation';\nimport { AngularliciousRulesEngineModule } from '@angularlicious/rules-engine';\n\n@NgModule({\n  imports: [\n    AngularliciousLoggingModule,\n    AngularliciousFoundationModule,\n    AngularliciousCoreModule,\n    AngularliciousRulesEngineModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  declarations: [RegisterSubscriberComponent],\n  exports: [RegisterSubscriberComponent],\n  providers: [\n    AngularliciousLoggingService,\n    SecurityApiService, //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\n    SecurityBusinessProviderService //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\n    // HttpBaseService\n  ]\n})\nexport class AngularliciousSecurityModule {}\n"],"names":["tslib_1.__extends","rules.StringIsNotNullEmptyRange"],"mappings":"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"}
