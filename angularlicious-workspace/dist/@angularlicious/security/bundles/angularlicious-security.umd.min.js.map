{"version":3,"sources":["null","ng://@angularlicious/security/lib/business/actions/security-action-base.action.ts","ng://@angularlicious/security/lib/business/actions/register-subscriber.action.ts","ng://@angularlicious/security/lib/business/security-api.service.ts","ng://@angularlicious/security/lib/business/security-business-provider.service.ts","ng://@angularlicious/security/lib/models/subscriber.model.ts","ng://@angularlicious/security/lib/security.service.ts","ng://@angularlicious/security/lib/components/register-subscriber/register-subscriber.component.ts","ng://@angularlicious/security/lib/security.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","RegisterSubscriberAction","_super","subscriber","_this","call","actionName","tslib_1.__extends","preValidateAction","console","log","validationContext","withSource","addRule","rules.StringIsNotNullEmptyRange","Name","EmailAddress","performAction","loggingService","Severity","Information","response","businessProvider","securityApiService","registerSubscriber","SecurityActionBase","Do","serviceContext","execute","ActionBase","SecurityApiService","http","httpService","requestUrl","message","serviceName","body","JSON","stringify","options","createRequestOptions","HttpRequestMethod","POST","createHeader","get","Injectable","HttpClient","HttpBaseService","AngularliciousLoggingService","SecurityBusinessProviderService","action","ServiceBase","Subscriber","subscriberName","subscriberEmail","Date","AngularliciousSecurityService","verifyService","RegisterSubscriberComponent","securityService","formBuilder","router","EventEmitter","ngOnInit","buildForm","_form","group","Validators","required","emailAddress","submitForm","resetServiceContext","value","subscribeUser","subscribe","handleSubscribeUser","error","handleServiceErrors","finishRequest","componentName","logMessage","IsSuccess","emit","Component","args","selector","template","styles","FormBuilder","Router","Output","ComponentBase","AngularliciousSecurityModule","NgModule","imports","AngularliciousLoggingModule","AngularliciousFoundationModule","AngularliciousCoreModule","AngularliciousRulesEngineModule","CommonModule","FormsModule","ReactiveFormsModule","HttpClientModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { SecurityBusinessProviderService } from './../../business/security-business-provider.service';\r\nimport { AngularliciousLoggingService } from '@angularlicious/logging';\r\nimport { ActionBase } from '@angularlicious/foundation';\r\n\r\nexport class SecurityActionBase extends ActionBase {\r\n  businessProvider: SecurityBusinessProviderService;\r\n  loggingService: AngularliciousLoggingService;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Use the [Do] method to perform the action.\r\n   */\r\n  Do(businessProvider: SecurityBusinessProviderService) {\r\n    // Provide the [SecurityBusinessProviderService], [ServiceContext], and [LoggingService] to action;\r\n    this.businessProvider = businessProvider;\r\n    this.serviceContext = businessProvider.serviceContext;\r\n    this.loggingService = businessProvider.loggingService;\r\n\r\n    this.execute();\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n// // import { Response } from '@angular/http';\r\nimport { ActionResult } from '@angularlicious/actions';\r\nimport * as rules from '@angularlicious/rules-engine';\r\n\r\nimport {\r\n  HttpBaseService,\r\n  ServiceResponse,\r\n  ErrorResponse\r\n} from '@angularlicious/foundation';\r\nimport { Severity } from '@angularlicious/logging';\r\n\r\nimport { Subscriber } from '../../models/subscriber.model';\r\nimport { SecurityActionBase } from './security-action-base.action';\r\nimport { HttpResponse } from '@angular/common/http';\r\n\r\nexport class RegisterSubscriberAction extends SecurityActionBase {\r\n  constructor(private subscriber: Subscriber) {\r\n    super();\r\n    this.actionName = 'RegisterSubscriberAction';\r\n  }\r\n\r\n  /**\r\n   * Override this method from the base [Action] class to allow for rules to be added to the\r\n   * action's [ValidationContext]. Any rules added to the [ValidationContext] here will be executed when\r\n   * the action's [ValidateAction] method is called - this method is just one of many pipeline methods\r\n   * of the [Action] framework.\r\n   */\r\n  preValidateAction() {\r\n    console.log(\r\n      `Running the [preValidateAction] for the ${this.actionName} action.`\r\n    );\r\n    this.validationContext\r\n      .withSource(this.actionName)\r\n      .addRule(\r\n        new rules.StringIsNotNullEmptyRange(\r\n          'NameIsValid',\r\n          'The name value is not valid. Must be between 1-40 characters.',\r\n          this.subscriber.Name,\r\n          2,\r\n          40,\r\n          true\r\n        )\r\n      )\r\n      .addRule(\r\n        new rules.StringIsNotNullEmptyRange(\r\n          'EmailIsValid',\r\n          'The email address value is not valid. Must be between 5-60 characters.',\r\n          this.subscriber.EmailAddress,\r\n          5,\r\n          60,\r\n          true\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Use this method to provide business logic implementation - this method is allowed to execute only if the current action\r\n   * does not contain any rule violations.\r\n   */\r\n  performAction() {\r\n    this.loggingService.log(\r\n      this.actionName,\r\n      Severity.Information,\r\n      `Running the [performAction] for the ${this.actionName}.`\r\n    );\r\n    this.response = this.businessProvider.securityApiService.registerSubscriber(\r\n      this.subscriber\r\n    );\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\n// import 'rxjs/add/operator/map';\r\n// import 'rxjs/add/operator/catch';\r\n// import 'rxjs/add/operator/observeOn';\r\n// import 'rxjs/add/operator/toPromise';\r\nimport { Observable } from 'rxjs';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { HttpBaseService, ServiceResponse } from '@angularlicious/foundation';\r\nimport {\r\n  AngularliciousLoggingService,\r\n  Severity\r\n} from '@angularlicious/logging';\r\nimport { Subscriber } from '../models/subscriber.model';\r\nimport { HttpRequestMethod } from '@angularlicious/foundation';\r\n\r\n@Injectable()\r\nexport class SecurityApiService extends HttpBaseService {\r\n  constructor(\r\n    http: HttpClient,\r\n    public httpService: HttpBaseService,\r\n    loggingService: AngularliciousLoggingService\r\n  ) {\r\n    super(http, loggingService);\r\n  }\r\n\r\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    const requestUrl = 'api/subscriber/register';\r\n    const message = `${this.serviceName} preparing to call: ${requestUrl}`;\r\n    this.loggingService.log(this.serviceName, Severity.Information, message);\r\n\r\n    const body = JSON.stringify(subscriber);\r\n    const options = this.httpService.createRequestOptions(\r\n      HttpRequestMethod.POST,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body\r\n    );\r\n    return this.httpService.get(options);\r\n\r\n    /**TEMPORARY IMPLEMENTATION */\r\n    // const response = new ServiceResponse();\r\n    // response.IsSuccess = true;\r\n    // response.Message = `Fake message from ${this.serviceName}`;\r\n    // response.Data = true;\r\n    // const subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n    // return subject.asObservable();\r\n    /**TEMPORARY IMPLEMENTATION */\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpResponse } from '@angular/common/http';\r\n\r\nimport { ServiceBase, ServiceResponse } from '@angularlicious/foundation';\r\nimport {\r\n  LoggingServiceConfig,\r\n  AngularliciousLoggingService\r\n} from '@angularlicious/logging';\r\nimport { RegisterSubscriberAction } from './actions/register-subscriber.action';\r\nimport { Subscriber } from '../models/subscriber.model';\r\nimport { SecurityApiService } from './security-api.service';\r\n\r\n@Injectable()\r\nexport class SecurityBusinessProviderService extends ServiceBase {\r\n  constructor(\r\n    loggingService: AngularliciousLoggingService,\r\n    public securityApiService: SecurityApiService\r\n  ) {\r\n    super(loggingService);\r\n  }\r\n\r\n  /**\r\n   * Use action to register a new subscriber.\r\n   * @param subscriber\r\n   */\r\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    const action = new RegisterSubscriberAction(subscriber);\r\n    action.Do(this);\r\n    return action.response;\r\n  }\r\n}\r\n","export class Subscriber {\r\n  Name: string;\r\n  EmailAddress: string;\r\n  SubscriptionStart: Date = new Date();\r\n\r\n  /**\r\n   * Use to create a new subscriber for the application. This is not an account - only\r\n   * a subscription to resources from the application.\r\n   * @param subscriberName\\\r\n   * @param subscriberEmail\r\n   */\r\n  constructor(subscriberName: string, subscriberEmail: string) {\r\n    this.Name = subscriberName;\r\n    this.EmailAddress = subscriberEmail;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ServiceBase, ServiceResponse } from '@angularlicious/foundation';\r\nimport {\r\n  AngularliciousLoggingService,\r\n  Severity\r\n} from '@angularlicious/logging';\r\nimport { SecurityBusinessProviderService } from './business/security-business-provider.service';\r\nimport { Subscriber } from './models/subscriber.model';\r\n\r\n// import { Subscriber } from './models/subscriber.model';\r\n// import { SubscriberBusinessProviderService } from './business/subscriber-business-provider.service';\r\n// import { ConfirmationToken } from './models/confirmation-token.model';\r\n\r\n@Injectable()\r\nexport class AngularliciousSecurityService extends ServiceBase {\r\n  constructor(\r\n    loggingService: AngularliciousLoggingService,\r\n    private businessProvider: SecurityBusinessProviderService\r\n  ) {\r\n    super(loggingService);\r\n    this.serviceName = 'AngularliciousSecurityService';\r\n    this.businessProvider.serviceContext = this.serviceContext;\r\n    this.businessProvider.loggingService = this.loggingService;\r\n  }\r\n\r\n  /**\r\n   * Use to register a new subscriber to the application.\r\n   * @param subscriber contains the user name and email address for the subscriber.\r\n   */\r\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    const message = `Preparing to register subscriber: ${JSON.stringify(\r\n      subscriber\r\n    )}`;\r\n    this.loggingService.log(this.serviceName, Severity.Information, message);\r\n    return this.businessProvider.registerSubscriber(subscriber);\r\n  }\r\n\r\n  // /**\r\n  //  * Use to confirm a new subscriber.\r\n  //  * @param confirmationToken contains the user name and a [Hash] value that is used to confirm the user.\r\n  //  */\r\n  // confirmSubscriber(confirmationToken: ConfirmationToken) {\r\n  //   this.loggingService.log(this.serviceName, Severity.Information, `Preparing to confirm subscriber.`);\r\n  //   return this.businessProvider.confirmSubscriber(confirmationToken)\r\n  // }\r\n\r\n  verifyService(): boolean {\r\n    if (\r\n      this.loggingService &&\r\n      this.businessProvider &&\r\n      this.businessProvider.securityApiService\r\n    )\r\n      return true;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ComponentBase } from '@angularlicious/foundation';\r\nimport {\r\n  AngularliciousLoggingService,\r\n  Severity\r\n} from '@angularlicious/logging';\r\nimport { Subscriber } from '../../models/subscriber.model';\r\nimport { AngularliciousSecurityService } from '../../security.service';\r\nimport { ServiceResponse, ErrorResponse } from '@angularlicious/foundation';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'bm-register-subscriber',\r\n  template: `<angularlicious-alert [alertNotification]=\"alertNotification\" [hasMessage]=\"alertNotification.showAlert\"></angularlicious-alert>\r\n<!-- SUBSCRIBE SIGN-UP FORM -->\r\n<form [formGroup]=\"_form\" (ngSubmit)=\"submitForm()\">\r\n  <!-- SUBSCRIBER NAME -->\r\n  <div class=\"input-group form-group-no-border\">\r\n    <span class=\"input-group-addon\">\r\n      <i class=\"now-ui-icons users_circle-08\"></i>\r\n    </span>\r\n    <input type=\"text\" formControlName=\"subscriberName\" class=\"form-control\" placeholder=\"Name...\">\r\n  </div>\r\n  <!-- SUBSCRIBER EMAIL -->\r\n  <div class=\"input-group form-group-no-border\">\r\n    <span class=\"input-group-addon\">\r\n      <i class=\"now-ui-icons ui-1_email-85\"></i>\r\n    </span>\r\n    <input type=\"text\" formControlName=\"emailAddress\" class=\"form-control\" placeholder=\"Email...\">\r\n  </div>\r\n  <!-- SUBSCRIBE BUTTON -->\r\n  <button class=\"btn btn-neutral btn-round btn-lg\">Subscribe\r\n    <i class=\"fa fa-check ml-1\"></i>\r\n  </button>\r\n</form>\r\n<!-- SUBSCRIBE SIGN-UP FORM -->`,\r\n  styles: [``]\r\n})\r\nexport class RegisterSubscriberComponent extends ComponentBase\r\n  implements OnInit {\r\n  @Output() subscribe = new EventEmitter<ServiceResponse>();\r\n  _form: FormGroup;\r\n  subscriber: Subscriber;\r\n\r\n  constructor(\r\n    private securityService: AngularliciousSecurityService,\r\n    loggingService: AngularliciousLoggingService,\r\n    public formBuilder: FormBuilder,\r\n    router: Router\r\n  ) {\r\n    super('RegisterSubscriberComponent', loggingService, router);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm(): void {\r\n    this._form = this.formBuilder.group({\r\n      subscriberName: ['', Validators.required],\r\n      emailAddress: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  submitForm() {\r\n    this.securityService.resetServiceContext();\r\n    this.subscriber = new Subscriber(\r\n      this._form.value.subscriberName,\r\n      this._form.value.emailAddress\r\n    );\r\n    this.subscribeUser(this.subscriber);\r\n  }\r\n\r\n  subscribeUser(subscriber: Subscriber) {\r\n    this.securityService\r\n      .registerSubscriber(subscriber)\r\n      .subscribe(\r\n        (response: ServiceResponse) => this.handleSubscribeUser(response),\r\n        error =>\r\n          this.handleServiceErrors(error, this.securityService.serviceContext),\r\n        () => this.finishRequest(this.componentName)\r\n      );\r\n  }\r\n\r\n  handleSubscribeUser(response: ServiceResponse) {\r\n    const functionName = 'handleSubscribeUser';\r\n    const logMessage = `[${functionName}]: Preparing to handle the response from the [SecurityService] in the ${\r\n      this.componentName\r\n    }.`;\r\n    this.loggingService.log(\r\n      this.componentName,\r\n      Severity.Information,\r\n      logMessage\r\n    );\r\n    if (response) {\r\n      if (response.IsSuccess) {\r\n        const successMessage = `Successfully processed request to create subscriber. Prepare to download...`;\r\n        this.loggingService.log(\r\n          this.componentName,\r\n          Severity.Information,\r\n          successMessage\r\n        );\r\n        this.subscribe.emit(response as ServiceResponse);\r\n      } else {\r\n        this.handleServiceErrors(\r\n          // response as ErrorResponse,\r\n          null,\r\n          this.securityService.serviceContext\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {\r\n  AngularliciousLoggingModule,\r\n  AngularliciousLoggingService\r\n} from '@angularlicious/logging';\r\nimport { AngularliciousFoundationModule } from '@angularlicious/foundation';\r\nimport { AngularliciousCoreModule } from '@angularlicious/core';\r\nimport { SecurityBusinessProviderService } from './business/security-business-provider.service';\r\nimport { SecurityApiService } from './business/security-api.service';\r\nimport { RegisterSubscriberComponent } from './components/register-subscriber/register-subscriber.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { HttpBaseService } from '@angularlicious/foundation';\r\nimport { AngularliciousRulesEngineModule } from '@angularlicious/rules-engine';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AngularliciousLoggingModule,\r\n    AngularliciousFoundationModule,\r\n    AngularliciousCoreModule,\r\n    AngularliciousRulesEngineModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [RegisterSubscriberComponent],\r\n  exports: [RegisterSubscriberComponent],\r\n  providers: [\r\n    AngularliciousLoggingService,\r\n    SecurityApiService, //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\r\n    SecurityBusinessProviderService //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\r\n    // HttpBaseService\r\n  ]\r\n})\r\nexport class AngularliciousSecurityModule {}\r\n"]}