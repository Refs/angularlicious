{"version":3,"file":"angularlicious-security.umd.js.map","sources":[null,"ng://@angularlicious/security/lib/business/actions/security-action-base.action.ts","ng://@angularlicious/security/lib/business/actions/register-subscriber.action.ts","ng://@angularlicious/security/lib/business/security-api.service.ts","ng://@angularlicious/security/lib/business/security-business-provider.service.ts","ng://@angularlicious/security/lib/models/subscriber.model.ts","ng://@angularlicious/security/lib/security.service.ts","ng://@angularlicious/security/lib/components/register-subscriber/register-subscriber.component.ts","ng://@angularlicious/security/lib/security.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { SecurityBusinessProviderService } from './../../business/security-business-provider.service';\nimport { AngularliciousLoggingService } from '@angularlicious/logging';\nimport { ActionBase } from '@angularlicious/foundation';\n\nexport class SecurityActionBase extends ActionBase {\n  businessProvider: SecurityBusinessProviderService;\n  loggingService: AngularliciousLoggingService;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Use the [Do] method to perform the action.\n   */\n  Do(businessProvider: SecurityBusinessProviderService) {\n    // Provide the [SecurityBusinessProviderService], [ServiceContext], and [LoggingService] to action;\n    this.businessProvider = businessProvider;\n    this.serviceContext = businessProvider.serviceContext;\n    this.loggingService = businessProvider.loggingService;\n\n    this.execute();\n  }\n}\n","import { Observable } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs';\n\n// // import { Response } from '@angular/http';\nimport { ActionResult } from '@angularlicious/actions';\nimport * as rules from '@angularlicious/rules-engine';\n\nimport {\n  HttpBaseService,\n  ServiceResponse,\n  ErrorResponse\n} from '@angularlicious/foundation';\nimport { Severity } from '@angularlicious/logging';\n\nimport { Subscriber } from './../../models/subscriber.model';\nimport { SecurityActionBase } from './security-action-base.action';\nimport { HttpResponse } from '@angular/common/http';\n\nexport class RegisterSubscriberAction extends SecurityActionBase {\n  constructor(private subscriber: Subscriber) {\n    super();\n    this.actionName = 'RegisterSubscriberAction';\n  }\n\n  /**\n   * Override this method from the base [Action] class to allow for rules to be added to the\n   * action's [ValidationContext]. Any rules added to the [ValidationContext] here will be executed when\n   * the action's [ValidateAction] method is called - this method is just one of many pipeline methods\n   * of the [Action] framework.\n   */\n  preValidateAction() {\n    console.log(\n      `Running the [preValidateAction] for the ${this.actionName} action.`\n    );\n    this.validationContext\n      .withSource(this.actionName)\n      .addRule(\n        new rules.StringIsNotNullEmptyRange(\n          'NameIsValid',\n          'The name value is not valid. Must be between 1-40 characters.',\n          this.subscriber.Name,\n          2,\n          40,\n          true\n        )\n      )\n      .addRule(\n        new rules.StringIsNotNullEmptyRange(\n          'EmailIsValid',\n          'The email address value is not valid. Must be between 5-60 characters.',\n          this.subscriber.EmailAddress,\n          5,\n          60,\n          true\n        )\n      );\n  }\n\n  /**\n   * Use this method to provide business logic implementation - this method is allowed to execute only if the current action\n   * does not contain any rule violations.\n   */\n  performAction() {\n    this.loggingService.log(\n      this.actionName,\n      Severity.Information,\n      `Running the [performAction] for the ${this.actionName}.`\n    );\n    this.response = this.businessProvider.securityApiService.registerSubscriber(\n      this.subscriber\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n// import 'rxjs/add/operator/map';\n// import 'rxjs/add/operator/catch';\n// import 'rxjs/add/operator/observeOn';\n// import 'rxjs/add/operator/toPromise';\nimport { Observable } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { HttpBaseService, ServiceResponse } from '@angularlicious/foundation';\nimport {\n  AngularliciousLoggingService,\n  Severity\n} from '@angularlicious/logging';\nimport { Subscriber } from './../models/subscriber.model';\nimport { HttpRequestMethod } from '@angularlicious/foundation';\n\n@Injectable()\nexport class SecurityApiService extends HttpBaseService {\n  constructor(\n    http: HttpClient,\n    public httpService: HttpBaseService,\n    loggingService: AngularliciousLoggingService\n  ) {\n    super(http, loggingService);\n  }\n\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\n    const requestUrl = 'api/subscriber/register';\n    const message = `${this.serviceName} preparing to call: ${requestUrl}`;\n    this.loggingService.log(this.serviceName, Severity.Information, message);\n\n    const body = JSON.stringify(subscriber);\n    const options = this.httpService.createRequestOptions(\n      HttpRequestMethod.POST,\n      this.httpService.createHeader(false),\n      requestUrl,\n      body\n    );\n    return this.httpService.get(options);\n\n    /**TEMPORARY IMPLEMENTATION */\n    // const response = new ServiceResponse();\n    // response.IsSuccess = true;\n    // response.Message = `Fake message from ${this.serviceName}`;\n    // response.Data = true;\n    // const subject: BehaviorSubject<any> = new BehaviorSubject(response);\n    // return subject.asObservable();\n    /**TEMPORARY IMPLEMENTATION */\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpResponse } from '@angular/common/http';\n\nimport { ServiceBase, ServiceResponse } from '@angularlicious/foundation';\nimport {\n  LoggingServiceConfig,\n  AngularliciousLoggingService\n} from '@angularlicious/logging';\nimport { RegisterSubscriberAction } from './actions/register-subscriber.action';\nimport { Subscriber } from './../models/subscriber.model';\nimport { SecurityApiService } from './security-api.service';\n\n@Injectable()\nexport class SecurityBusinessProviderService extends ServiceBase {\n  constructor(\n    loggingService: AngularliciousLoggingService,\n    public securityApiService: SecurityApiService\n  ) {\n    super(loggingService);\n  }\n\n  /**\n   * Use action to register a new subscriber.\n   * @param subscriber\n   */\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\n    const action = new RegisterSubscriberAction(subscriber);\n    action.Do(this);\n    return action.response;\n  }\n}\n","export class Subscriber {\n  Name: string;\n  EmailAddress: string;\n  SubscriptionStart: Date = new Date();\n\n  /**\n   * Use to create a new subscriber for the application. This is not an account - only\n   * a subscription to resources from the application.\n   * @param subscriberName\\\n   * @param subscriberEmail\n   */\n  constructor(subscriberName: string, subscriberEmail: string) {\n    this.Name = subscriberName;\n    this.EmailAddress = subscriberEmail;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ServiceBase, ServiceResponse } from '@angularlicious/foundation';\nimport {\n  AngularliciousLoggingService,\n  Severity\n} from '@angularlicious/logging';\nimport { SecurityBusinessProviderService } from './business/security-business-provider.service';\nimport { Subscriber } from './models/subscriber.model';\n\n// import { Subscriber } from './models/subscriber.model';\n// import { SubscriberBusinessProviderService } from './business/subscriber-business-provider.service';\n// import { ConfirmationToken } from './models/confirmation-token.model';\n\n@Injectable()\nexport class AngularliciousSecurityService extends ServiceBase {\n  constructor(\n    loggingService: AngularliciousLoggingService,\n    private businessProvider: SecurityBusinessProviderService\n  ) {\n    super(loggingService);\n    this.serviceName = 'AngularliciousSecurityService';\n    this.businessProvider.serviceContext = this.serviceContext;\n    this.businessProvider.loggingService = this.loggingService;\n  }\n\n  /**\n   * Use to register a new subscriber to the application.\n   * @param subscriber contains the user name and email address for the subscriber.\n   */\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\n    const message = `Preparing to register subscriber: ${JSON.stringify(\n      subscriber\n    )}`;\n    this.loggingService.log(this.serviceName, Severity.Information, message);\n    return this.businessProvider.registerSubscriber(subscriber);\n  }\n\n  // /**\n  //  * Use to confirm a new subscriber.\n  //  * @param confirmationToken contains the user name and a [Hash] value that is used to confirm the user.\n  //  */\n  // confirmSubscriber(confirmationToken: ConfirmationToken) {\n  //   this.loggingService.log(this.serviceName, Severity.Information, `Preparing to confirm subscriber.`);\n  //   return this.businessProvider.confirmSubscriber(confirmationToken)\n  // }\n\n  verifyService(): boolean {\n    if (\n      this.loggingService &&\n      this.businessProvider &&\n      this.businessProvider.securityApiService\n    )\n      return true;\n  }\n}\n","import {\n  Component,\n  OnInit,\n  Output,\n  ViewChild,\n  EventEmitter\n} from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ComponentBase } from '@angularlicious/foundation';\nimport {\n  AngularliciousLoggingService,\n  Severity\n} from '@angularlicious/logging';\nimport { Subscriber } from './../../models/subscriber.model';\nimport { AngularliciousSecurityService } from './../../security.service';\nimport { ServiceResponse, ErrorResponse } from '@angularlicious/foundation';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'bm-register-subscriber',\n  template: `<angularlicious-alert [alertNotification]=\"alertNotification\" [hasMessage]=\"alertNotification.showAlert\"></angularlicious-alert>\n<!-- SUBSCRIBE SIGN-UP FORM -->\n<form [formGroup]=\"_form\" (ngSubmit)=\"submitForm()\">\n  <!-- SUBSCRIBER NAME -->\n  <div class=\"input-group form-group-no-border\">\n    <span class=\"input-group-addon\">\n      <i class=\"now-ui-icons users_circle-08\"></i>\n    </span>\n    <input type=\"text\" formControlName=\"subscriberName\" class=\"form-control\" placeholder=\"Name...\">\n  </div>\n  <!-- SUBSCRIBER EMAIL -->\n  <div class=\"input-group form-group-no-border\">\n    <span class=\"input-group-addon\">\n      <i class=\"now-ui-icons ui-1_email-85\"></i>\n    </span>\n    <input type=\"text\" formControlName=\"emailAddress\" class=\"form-control\" placeholder=\"Email...\">\n  </div>\n  <!-- SUBSCRIBE BUTTON -->\n  <button class=\"btn btn-neutral btn-round btn-lg\">Subscribe\n    <i class=\"fa fa-check ml-1\"></i>\n  </button>\n</form>\n<!-- SUBSCRIBE SIGN-UP FORM -->`,\n  styles: [``]\n})\nexport class RegisterSubscriberComponent extends ComponentBase\n  implements OnInit {\n  @Output() subscribe = new EventEmitter<ServiceResponse>();\n  _form: FormGroup;\n  subscriber: Subscriber;\n\n  constructor(\n    private securityService: AngularliciousSecurityService,\n    loggingService: AngularliciousLoggingService,\n    public formBuilder: FormBuilder,\n    router: Router\n  ) {\n    super('RegisterSubscriberComponent', loggingService, router);\n  }\n\n  ngOnInit() {\n    this.buildForm();\n  }\n\n  buildForm(): void {\n    this._form = this.formBuilder.group({\n      subscriberName: ['', Validators.required],\n      emailAddress: ['', Validators.required]\n    });\n  }\n\n  submitForm() {\n    this.securityService.resetServiceContext();\n    this.subscriber = new Subscriber(\n      this._form.value.subscriberName,\n      this._form.value.emailAddress\n    );\n    this.subscribeUser(this.subscriber);\n  }\n\n  subscribeUser(subscriber: Subscriber) {\n    this.securityService\n      .registerSubscriber(subscriber)\n      .subscribe(\n        (response: ServiceResponse) => this.handleSubscribeUser(response),\n        error =>\n          this.handleServiceErrors(error, this.securityService.serviceContext),\n        () => this.finishRequest(this.componentName)\n      );\n  }\n\n  handleSubscribeUser(response: ServiceResponse) {\n    const functionName = 'handleSubscribeUser';\n    const logMessage = `[${functionName}]: Preparing to handle the response from the [SecurityService] in the ${\n      this.componentName\n    }.`;\n    this.loggingService.log(\n      this.componentName,\n      Severity.Information,\n      logMessage\n    );\n    if (response) {\n      if (response.IsSuccess) {\n        const successMessage = `Successfully processed request to create subscriber. Prepare to download...`;\n        this.loggingService.log(\n          this.componentName,\n          Severity.Information,\n          successMessage\n        );\n        this.subscribe.emit(response as ServiceResponse);\n      } else {\n        this.handleServiceErrors(\n          // response as ErrorResponse,\n          null,\n          this.securityService.serviceContext\n        );\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  AngularliciousLoggingModule,\n  AngularliciousLoggingService\n} from '@angularlicious/logging';\nimport { AngularliciousFoundationModule } from '@angularlicious/foundation';\nimport { AngularliciousCoreModule } from '@angularlicious/core';\nimport { SecurityBusinessProviderService } from './business/security-business-provider.service';\nimport { SecurityApiService } from './business/security-api.service';\nimport { RegisterSubscriberComponent } from './components/register-subscriber/register-subscriber.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HttpBaseService } from '@angularlicious/foundation';\nimport { AngularliciousRulesEngineModule } from '@angularlicious/rules-engine';\n\n@NgModule({\n  imports: [\n    AngularliciousLoggingModule,\n    AngularliciousFoundationModule,\n    AngularliciousCoreModule,\n    AngularliciousRulesEngineModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  declarations: [RegisterSubscriberComponent],\n  exports: [RegisterSubscriberComponent],\n  providers: [\n    AngularliciousLoggingService,\n    SecurityApiService, //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\n    SecurityBusinessProviderService //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\n    // HttpBaseService\n  ]\n})\nexport class AngularliciousSecurityModule {}\n"],"names":["tslib_1.__extends","ActionBase","rules.StringIsNotNullEmptyRange","Severity","http","HttpRequestMethod","Injectable","HttpClient","HttpBaseService","AngularliciousLoggingService","ServiceBase","router","EventEmitter","Validators","Component","FormBuilder","Router","Output","ComponentBase","NgModule","AngularliciousLoggingModule","AngularliciousFoundationModule","AngularliciousCoreModule","AngularliciousRulesEngineModule","CommonModule","FormsModule","ReactiveFormsModule","HttpClientModule"],"mappings":"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"}
