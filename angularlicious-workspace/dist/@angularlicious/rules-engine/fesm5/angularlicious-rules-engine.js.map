{"version":3,"file":"angularlicious-rules-engine.js.map","sources":["ng://@angularlicious/rules-engine/src/rules-engine.module.ts","ng://@angularlicious/rules-engine/src/rules/RuleResult.ts","ng://@angularlicious/rules-engine/src/rules/RulePolicy.ts","ng://@angularlicious/rules-engine/src/rules/CompositeRule.ts","ng://@angularlicious/rules-engine/src/rules/SimpleRule.ts","ng://@angularlicious/rules-engine/src/rules/IsNullOrUndefined.ts","ng://@angularlicious/rules-engine/src/rules/IsNotNullOrUndefined.ts","ng://@angularlicious/rules-engine/src/rules/IsTrue.ts","ng://@angularlicious/rules-engine/src/rules/IsFalse.ts","ng://@angularlicious/rules-engine/src/rules/Min.ts","ng://@angularlicious/rules-engine/src/rules/Max.ts","ng://@angularlicious/rules-engine/src/rules/Range.ts","ng://@angularlicious/rules-engine/src/rules/AreEqual.ts","ng://@angularlicious/rules-engine/src/rules/AreNotEqual.ts","ng://@angularlicious/rules-engine/src/rules/StringIsNotNullEmptyRange.ts","ng://@angularlicious/rules-engine/src/service/ServiceContext.ts","ng://@angularlicious/rules-engine/src/service/ServiceMessage.ts","ng://@angularlicious/rules-engine/src/validation/ValidationContext.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  imports: [CommonModule]\r\n})\r\nexport class AngularliciousRulesEngineModule {}\r\n","import { RulePolicy } from './RulePolicy';\r\nimport { CompositeRule } from './CompositeRule';\r\n\r\n/**\r\n * This class defines the result of a single rule evaluation.\r\n */\r\nexport class RuleResult {\r\n\r\n  /**\r\n   * Use to indicate if the rule result is valid or not. \r\n   */\r\n  isValid = false;\r\n  \r\n  /**\r\n   * The rule that was evaluated.\r\n   */\r\n  rulePolicy: RulePolicy;\r\n  \r\n  /**\r\n   * The rule message to use when the evaluation [isValid] is [false].\r\n   */\r\n  message: string;\r\n  \r\n  /**\r\n   * The target item that was evaluated by the specified rule policy.\r\n   */\r\n  target: any;\r\n\r\n  /**\r\n   * Constructor for the RuleResult class.\r\n   * @param rulePolicy Use to specify the rule.\r\n   * @param target Use to specify the target to be evaluated by the rule.\r\n   */\r\n  constructor(rulePolicy: RulePolicy, target: any);\r\n  /**\r\n   * Constructor for the RuleResult class.\r\n   * @param rulePolicy Use to specify the rule.\r\n   */\r\n  constructor(rulePolicy: CompositeRule);\r\n  /**\r\n   * Constructor for the RuleResult class.\r\n   * @param rulePolicy Use to specify the rule.\r\n   * @param target Use to specify the target to be evaluated by the rule.\r\n   */\r\n  constructor(rulePolicy: RulePolicy, target?: any) {\r\n    if (rulePolicy != null) {\r\n      this.rulePolicy = rulePolicy;\r\n      this.isValid = rulePolicy.isValid;\r\n      this.message = rulePolicy.message;\r\n    }\r\n    this.target = target;\r\n  }\r\n}\r\n","import { IRuleComponent } from './IRuleComponent';\r\nimport { RuleResult } from './RuleResult';\r\nimport { RenderType } from './RenderType';\r\nimport { Severity } from './Severity';\r\n\r\n/**\r\n * This is the base class for all rules. All rules will extend from this class. New rules\r\n * should extend [SimpleRule] or [CompositeRule] - these rule abstractions extend [RulePolicy].\r\n */\r\nexport class RulePolicy implements IRuleComponent {\r\n  \r\n  /** Use to indicate the status of the rule. Value is false when the rule contains violations. */\r\n  isValid = true;\r\n  \r\n  /** Use to indicate the display message for a rule violation. */\r\n  message: string;\r\n  \r\n  /** Use to indicate the name of the specified rule. */\r\n  name: string;\r\n  \r\n  /** Use to indicate the priority value of the rule. Higher priority values are evaluated first. */\r\n  priority: number;\r\n  \r\n  /** The specified rules result. */\r\n  result: RuleResult;\r\n  \r\n  /** Use to indicate if the rule result is displayable. */\r\n  isDisplayable: boolean;\r\n  \r\n  /** Use to determine how the rule is evaluated. */\r\n  renderType: RenderType = RenderType.EvaluateAllRules;\r\n  \r\n  /** Use to indicate the severity for a rule violation. The default severity is [Exception]. */\r\n  severity: Severity = Severity.Exception;\r\n  \r\n  /** Use to indicate the source of the specified rule. */\r\n  source: string;\r\n\r\n  /**\r\n   * Overloaded constructor for the [RulePolicy] class.\r\n   * @param name The name of the rule.\r\n   * @param message The message to display when the rule is violated.\r\n   * @param isDisplayable: Indicates if the rule violation is displayble.\r\n   */\r\n  constructor(name: string, message: string, isDisplayable: boolean);\r\n  /**\r\n   * Overloaded constructor for the [RulePolicy] class.\r\n   * @param name The name of the rule.\r\n   * @param name The name of the rule.\r\n   * @param message The message to display when the rule is violated.\r\n   * @param isDisplayable: Indicates if the rule violation is displayble.\r\n   * @param severity (Optional) Use to indicate the rule violation severity. Default is [Exception].\r\n   * @param priority (Optional) Use to indciate the rule's evaluation priority. Higher numeric values are priority. 0 is default and lowest priority.\r\n   */\r\n  constructor(\r\n    name: string,\r\n    message: string,\r\n    isDisplayable: boolean = false,\r\n    severity: Severity = Severity.Exception,\r\n    priority: number = 0\r\n  ) {\r\n    this.name = name;\r\n    this.message = message;\r\n    this.isDisplayable = isDisplayable;\r\n    this.priority = priority;\r\n    this.severity = severity;\r\n  }\r\n\r\n  /**\r\n   * Use to execute the rule. This is the [template] method of the [template method] design\r\n   * pattern. It will coordindate the execution of any required methods in the processing\r\n   * pipeline. \r\n   */\r\n  execute(): RuleResult {\r\n    console.log('Begin execution of RulePolicy: ' + this.name);\r\n    return this.render();\r\n  }\r\n\r\n  /**\r\n   * Each rule must implement this function and return a valid [RuleResult].\r\n   */\r\n  render(): RuleResult {\r\n    throw new Error(\r\n      'Each concrete rule must implement this function and return a valid Result.'\r\n    );\r\n  }\r\n}\r\n","import { RulePolicy } from './RulePolicy';\r\nimport { RuleResult } from './RuleResult';\r\n\r\n/**\r\n * Use the [CompositeRule] as a base class for a complex rule - a rule that contains\r\n * other rules.\r\n */\r\nexport class CompositeRule extends RulePolicy {\r\n\r\n  /**\r\n   * Indicates if the rule has any rule violations.\r\n   */\r\n  hasErrors = false;\r\n\r\n  /**\r\n   * A list of results for evaluated rules. Rules must be rendered/executed before \r\n   * any results are available.\r\n   */\r\n  results: Array<RuleResult> = new Array<RuleResult>();\r\n\r\n  /**\r\n   * A list of rules for the specified composite rule.\r\n   */\r\n  rules: Array<RulePolicy> = new Array<RulePolicy>();\r\n\r\n  /**\r\n   *\r\n   * @param name The name of the rule.\r\n   * @param message The message to display if the rule is violated.\r\n   * @param isDisplayable Indicates if the rule is displayable.\r\n   */\r\n  constructor(name: string, message: string, isDisplayable: boolean) {\r\n    super(name, message, isDisplayable);\r\n  }\r\n\r\n  /**\r\n   * Use to render the evaluated result for the specified rule. This method\r\n   * returns a [RuleResult] with the evaluated result and rule information.\r\n   */\r\n  render(): RuleResult{\r\n    this.rules\r\n      .sort(s => s.priority)\r\n      .forEach(r => this.results.push(r.execute()));\r\n    return this.processResults();\r\n  }\r\n\r\n  /**\r\n   * Use to determine if the composite rule has child-rules that are\r\n   * members of the specified rule.\r\n   */\r\n  public hasRules(): boolean {\r\n    if (this.rules && this.rules.length > 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Use to process the results of the specified rule result collection. Composite\r\n   * rules will have one or more rule results for all child-rules.\r\n   * \r\n   * This method will return result with the evaluation summary and rule information.\r\n   */\r\n  processResults(): RuleResult {\r\n    if (this.results.filter(r => r.isValid === false).length > 0) {\r\n      this.isValid = false;\r\n      this.hasErrors = true;\r\n    }\r\n    return new RuleResult(this);\r\n  }\r\n}\r\n","import { RulePolicy } from './RulePolicy';\r\n\r\n/**\r\n * Use this class as a base [extends] class for simple rules. A simple contains\r\n * a single rule and target to evaluate.\r\n *\r\n * If you require a rule that will contain more than one rule, you should\r\n * use extend the [CompositeRule] class.\r\n */\r\nexport class SimpleRule extends RulePolicy {\r\n  /**\r\n   * The constructor for the simple rule.\r\n   * @param name The name of the rule.\r\n   * @param message The message to display if the rule is violated.\r\n   */\r\n  constructor(name: string, message: string, isDisplayable: boolean) {\r\n    super(name, message, isDisplayable);\r\n  }\r\n}\r\n","import { SimpleRule } from './SimpleRule';\r\nimport { RuleResult } from './RuleResult';\r\n\r\n/**\r\n * Use to determine if the target is [null] or [undefined].\r\n */\r\nexport class IsNullOrUndefined extends SimpleRule {\r\n\r\n   /**\r\n   * The target for the specified rule evaluation.\r\n   */\r\n  target;\r\n\r\n  /**\r\n   * The constructor for the [IsNullOrUndefined] rule.\r\n   * @param name The name of the rule.\r\n   * @param message The message to display when the rule is violated.\r\n   * @param target The target that the rules are evaluated against.\r\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\r\n   */\r\n  constructor(\r\n    name: string,\r\n    message: string,\r\n    target: any,\r\n    isDisplayable: boolean = false\r\n  ) {\r\n    super(name, message, isDisplayable);\r\n    this.target = target;\r\n  }\r\n\r\n  /**\r\n   * Use to render the evaluated result for the specified rule. This method\r\n   * returns a [RuleResult] with the evaluated result and rule information.\r\n   */\r\n  render(): RuleResult{\r\n    if (\r\n      this.target == null ||\r\n      typeof this.target === undefined ||\r\n      typeof this.target === 'undefined'\r\n    ) {\r\n      this.isValid = true;\r\n    } else {\r\n      this.isValid = false;\r\n    }\r\n    return new RuleResult(this, this.target);\r\n  }\r\n}\r\n","import { SimpleRule } from './SimpleRule';\r\nimport { RuleResult } from './RuleResult';\r\n\r\n/**\r\n * Use to determine if the target is NOT [null] or [undefined].\r\n */\r\nexport class IsNotNullOrUndefined extends SimpleRule {\r\n\r\n   /**\r\n   * The target for the specified rule evaluation.\r\n   */\r\n  target;\r\n\r\n  /**\r\n   * The constructor for the [IsNotNullOrUndefined] rule.\r\n   * @param name The name of the rule.\r\n   * @param message The message to display when the rule is violated.\r\n   * @param target The target that the rules are evaluated against.\r\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\r\n   */\r\n  constructor(\r\n    name: string,\r\n    message: string,\r\n    target: any,\r\n    isDisplayable: boolean = false\r\n  ) {\r\n    super(name, message, isDisplayable);\r\n    this.target = target;\r\n  }\r\n\r\n  /**\r\n   * Use to render the evaluated result for the specified rule. This method\r\n   * returns a [RuleResult] with the evaluated result and rule information.\r\n   */\r\n  render(): RuleResult{\r\n    if (\r\n      this.target == null ||\r\n      this.target === null ||\r\n      typeof this.target === 'undefined'\r\n    ) {\r\n      this.isValid = false;\r\n    }\r\n    return new RuleResult(this, this.target);\r\n  }\r\n}\r\n","import { SimpleRule } from './SimpleRule';\r\nimport { RuleResult } from './RuleResult';\r\n\r\n/**\r\n * Use to determine if the target is truthy.\r\n */\r\nexport class IsTrue extends SimpleRule {\r\n\r\n  /**\r\n   * The target for the specified rule evaluation.\r\n   */\r\n  target: boolean;\r\n\r\n  /**\r\n   * The constructor for the [IsTrue] rule.\r\n   * @param name The name of the rule.\r\n   * @param message The message to display when the rule is violated.\r\n   * @param target The target that the rules are evaluated against.\r\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [true].\r\n   */\r\n  constructor(\r\n    name: string,\r\n    message: string,\r\n    target: boolean,\r\n    isDisplayable: boolean = true\r\n  ) {\r\n    super(name, message, isDisplayable);\r\n    this.target = target;\r\n  }\r\n\r\n /**\r\n   * Use to render the evaluated result for the specified rule. This method\r\n   * returns a [RuleResult] with the evaluated result and rule information.\r\n   */\r\n  render(): RuleResult{\r\n    this.isValid = true;\r\n    if (this.target === false) {\r\n      //if(not true)-->false;\r\n      this.isValid = false;\r\n    }\r\n    return new RuleResult(this, this.target);\r\n  }\r\n}\r\n","import { SimpleRule } from './SimpleRule';\r\nimport { RuleResult } from './RuleResult';\r\n\r\n/**\r\n * Use to indicate if the value is falsy.\r\n */\r\nexport class IsFalse extends SimpleRule {\r\n\r\n  /**\r\n   * Use to indicate the target value to evaluate.\r\n   */\r\n  target: boolean;\r\n\r\n  /**\r\n   * The constructor for the [IsFalse] rule.\r\n   * @param name The name of the rule.\r\n   * @param message The message to display when the rule is violated.\r\n   * @param target The target that the rules are evaluated against.\r\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\r\n   */\r\n  constructor(\r\n    name: string,\r\n    message: string,\r\n    target: boolean,\r\n    isDisplayable: boolean = false\r\n  ) {\r\n    super(name, message, isDisplayable);\r\n    this.target = target;\r\n  }\r\n\r\n  /**\r\n   * Use to render the evaluated result for the specified rule. This method\r\n   * returns a [RuleResult] with the evaluated result and rule information.\r\n   */\r\n  render(): RuleResult {\r\n    if (this.target) {\r\n      //if(true)-->false;\r\n      this.isValid = false;\r\n    }\r\n    return new RuleResult(this, this.target);\r\n  }\r\n}\r\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\r\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\r\n\r\nimport { SimpleRule } from './SimpleRule';\r\nimport { RuleResult } from './RuleResult';\r\nimport { Primitive } from './Primitive';\r\n\r\n/**\r\n * Use the [Min] rule to determine if the target value is equal to or greater than the minimum\r\n * allowed value [comparison].\r\n */\r\nexport class Min extends SimpleRule {\r\n \r\n  /**\r\n   * The target for the rule instance.\r\n   */\r\n  target: Primitive;\r\n\r\n  /**\r\n   * The comparison item for the specified rule instance.\r\n   */\r\n  comparison: Primitive;\r\n\r\n  /**\r\n   * The constructor for the [Min] rule.\r\n   * @param name The name of the rule.\r\n   * @param message The message to display when the rule is violated.\r\n   * @param target The target that the rules are evaluated against.\r\n   * @param comparison The comparison target the rules are evaluated against.\r\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\r\n   */\r\n  constructor(\r\n    name: string,\r\n    message: string,\r\n    target: Primitive,\r\n    comparison: Primitive,\r\n    isDisplayable: boolean = false\r\n  ) {\r\n    super(name, message, isDisplayable);\r\n    this.target = target;\r\n    this.comparison = comparison;\r\n  }\r\n\r\n  /**\r\n   * Use to render the evaluated result for the specified rule. This method\r\n   * returns a [RuleResult] with the evaluated result and rule information.\r\n   */\r\n  render(): RuleResult{\r\n    const compareResult = compare(this.target, this.comparison, true);\r\n    if (compareResult === CompareResult.Less) {\r\n      this.isValid = false; //must be equal to or greater than the comparison value;\r\n    }\r\n    return new RuleResult(this, this.target);\r\n  }\r\n}\r\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\r\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\r\n\r\nimport { SimpleRule } from './SimpleRule';\r\nimport { RuleResult } from './RuleResult';\r\nimport { Primitive } from './Primitive';\r\n\r\n/**\r\n * Use the [Max] rule to determine if the target value is equal to or less than\r\n * the comparison value.\r\n */\r\nexport class Max extends SimpleRule {\r\n\r\n  /**\r\n   * The target for the rule instance.\r\n   */\r\n  target: Primitive;\r\n\r\n  /**\r\n   * The comparison item for the specified rule instance.\r\n   */\r\n  comparison: Primitive;\r\n\r\n  /**\r\n   * The constructor for the [Max] rule.\r\n   * @param name The name of the rule.\r\n   * @param message The message to display when the rule is violated.\r\n   * @param target The target that the rules are evaluated against.\r\n   * @param comparison The comparison target the rules are evaluated against.\r\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\r\n   */\r\n  constructor(\r\n    name: string,\r\n    message: string,\r\n    target: Primitive,\r\n    comparison: Primitive,\r\n    isDisplayable: boolean = false\r\n  ) {\r\n    super(name, message, isDisplayable);\r\n    this.target = target;\r\n    this.comparison = comparison;\r\n  }\r\n\r\n  /**\r\n   * Use to render the evaluated result for the specified rule. This method\r\n   * returns a [RuleResult] with the evaluated result and rule information.\r\n   */\r\n  render(): RuleResult{\r\n    const compareResult = compare(this.target, this.comparison, true);\r\n    if (compareResult === CompareResult.Greater) {\r\n      this.isValid = false;\r\n    }\r\n    return new RuleResult(this, this.target);\r\n  }\r\n}\r\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\r\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\r\n\r\nimport { SimpleRule } from './SimpleRule';\r\nimport { RuleResult } from './RuleResult';\r\nimport { Primitive } from './Primitive';\r\n\r\nimport { CompositeRule } from './CompositeRule';\r\nimport { IsNotNullOrUndefined } from './IsNotNullOrUndefined';\r\nimport { Min } from './Min';\r\nimport { Max } from './Max';\r\n\r\n/**\r\n * Use this rule to determine if the specified target is within the specified range (start and end) values.\r\n *\r\n * The range values are inclusive.\r\n *\r\n * Ex: 1 is within 1 and 3. The target is valid.\r\n * Ex: 2 is within 1 and 3. The target is valid.\r\n * Ex: 0 is not within 1 and 3. The target is not valid.\r\n * Ex: 4 is not within 1 and 3. The target is not valid.\r\n */\r\nexport class Range extends CompositeRule {\r\n  /**\r\n   * Use to indicate the end value of the range.\r\n   */\r\n  end: number;\r\n  /**\r\n   * Use to indicate the start value of the range.\r\n   */\r\n  start: number;\r\n  /**\r\n   * Use to indicate the [primitive] value that will be evaluated. The value\r\n   * must be within the [start] and the [end] value to be valid.\r\n   */\r\n  target: Primitive;\r\n\r\n  /**\r\n   * Constructor for the [Range] rule.\r\n   * @param name The name of the rule.\r\n   * @param message: A message to display if the rule is violated.\r\n   * @param target The target object that the rules will be applied to.\r\n   * @param start The start range value - the lowest allowed boundary value.\r\n   * @param end The end range value - the highest allowed boundary value.\r\n   * @param isDisplayable: (Optional) Indicates if the rule violation may be displayed or visible to the caller or client. Default is [false].\r\n   */\r\n  constructor(\r\n    name: string,\r\n    message: string,\r\n    target: Primitive,\r\n    start: number,\r\n    end: number,\r\n    isDisplayable: boolean = false\r\n  ) {\r\n    super(name, message, isDisplayable);\r\n    this.target = target;\r\n    this.start = start;\r\n    this.end = end;\r\n    this.isDisplayable = isDisplayable;\r\n\r\n    this.rules.push(\r\n      new IsNotNullOrUndefined(\r\n        'TargetIsNotNull',\r\n        'The target is null or undefined.',\r\n        this.target\r\n      )\r\n    );\r\n\r\n    if (this.target != null) {\r\n      this.rules.push(\r\n        new Min(\r\n          'MinValue',\r\n          'The value must be equal to or greater than the start range value.',\r\n          this.target,\r\n          this.start\r\n        )\r\n      );\r\n      this.rules.push(\r\n        new Max(\r\n          'MaxValue',\r\n          'The value must be equal to or less than the end range value.',\r\n          this.target,\r\n          this.end\r\n        )\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\r\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\r\n\r\nimport { SimpleRule } from './SimpleRule';\r\nimport { RuleResult } from './RuleResult';\r\nimport { Primitive } from './Primitive';\r\n\r\n/**\r\n * Use to determine if the target is equal to the comparison target.\r\n */\r\nexport class AreEqual extends SimpleRule {\r\n \r\n  /**\r\n   * The target for the rule instance.\r\n   */\r\n  target: Primitive;\r\n\r\n  /**\r\n   * The comparison item for the specified rule instance.\r\n   */\r\n  comparison: Primitive;\r\n\r\n  /**\r\n   * The constructor for the [AreEqualRule] rule.\r\n   * @param name The name of the rule.\r\n   * @param message The message to display when the rule is violated.\r\n   * @param target The target that the rules are evaluated against.\r\n   * @param comparison The comparison target the rules are evaluated against.\r\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [true].\r\n   */\r\n  constructor(\r\n    name: string,\r\n    message: string,\r\n    target: Primitive,\r\n    comparison: Primitive,\r\n    isDisplayable: boolean = true\r\n  ) {\r\n    super(name, message, isDisplayable);\r\n    this.target = target;\r\n    this.comparison = comparison;\r\n  }\r\n\r\n /**\r\n   * Use to render the evaluated result for the specified rule. This method\r\n   * returns a [RuleResult] with the evaluated result and rule information.\r\n   */\r\n  render(): RuleResult{\r\n    if (compare(this.target, this.comparison, true) !== CompareResult.Equal) {\r\n      this.isValid = false;\r\n    }\r\n    return new RuleResult(this, this.target);\r\n  }\r\n}\r\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\r\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\r\n\r\nimport { SimpleRule } from './SimpleRule';\r\nimport { RuleResult } from './RuleResult';\r\nimport { Primitive } from './Primitive';\r\n\r\n/**\r\n * Use to determine if the target is not equal to the comparison target.\r\n */\r\nexport class AreNotEqual extends SimpleRule {\r\n \r\n  /**\r\n   * The target for the rule instance.\r\n   */\r\n  target: Primitive;\r\n\r\n  /**\r\n   * The comparison item for the specified rule instance.\r\n   */\r\n  comparison: Primitive;\r\n\r\n  /**\r\n   * The constructor for the [AreNotEqualRule] rule.\r\n   * @param name The name of the rule.\r\n   * @param message The message to display when the rule is violated.\r\n   * @param target The target that the rules are evaluated against.\r\n   * @param comparison The comparison target the rules are evaluated against.\r\n   * @param isDisplayable: (Optional) Indicates if the rule violation is displayble. Default is [true].\r\n   */\r\n  constructor(\r\n    name: string,\r\n    message: string,\r\n    target: Primitive,\r\n    comparison: Primitive,\r\n    isDisplayable: boolean = true\r\n  ) {\r\n    super(name, message, isDisplayable);\r\n    this.target = target;\r\n    this.comparison = comparison;\r\n  }\r\n\r\n  /**\r\n   * Use to render the evaluated result for the specified rule. This method\r\n   * returns a [RuleResult] with the evaluated result and rule information.\r\n   */\r\n  render(): RuleResult{\r\n    if (compare(this.target, this.comparison, true) === CompareResult.Equal) {\r\n      this.isValid = false;\r\n    }\r\n    return new RuleResult(this, this.target);\r\n  }\r\n}\r\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\r\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\r\n\r\nimport { SimpleRule } from './SimpleRule';\r\nimport { RuleResult } from './RuleResult';\r\nimport { Primitive } from './Primitive';\r\n\r\nimport { CompositeRule } from './CompositeRule';\r\nimport { IsNotNullOrUndefined } from './IsNotNullOrUndefined';\r\nimport { Range } from './Range';\r\n\r\n/**\r\n * Use this rule to validate a string target. A valid string is not null or undefined; and it\r\n * is within the specified minimum and maxiumum length.\r\n */\r\nexport class StringIsNotNullEmptyRange extends CompositeRule {\r\n  /**\r\n   * Use to indicate the maximum length of the target value.\r\n   */\r\n  maxLength: number;\r\n\r\n  /**\r\n   * Use to indicate the minimum lenth of the target value.\r\n   */\r\n  minLength: number;\r\n\r\n  /**\r\n   * Use to provide the target [Primitive] to evaluate for the specified rule.\r\n   */\r\n  target: Primitive;\r\n\r\n  /**\r\n   * The constructor for the [StringIsNotNullEmptyRangeRule].\r\n   * @param name The name of the rule.\r\n   * @param message The message to display when the rule is violated.\r\n   * @param target The target that the rule(s) will be evaluated against.\r\n   * @param minLength The minimum allowed length of the target value.\r\n   * @param maxLength The maximum allowed length of the target value.\r\n   */\r\n  constructor(\r\n    name: string,\r\n    message: string,\r\n    target: Primitive,\r\n    minLength: number,\r\n    maxLength: number,\r\n    isDisplayable: boolean = false\r\n  ) {\r\n    super(name, message, isDisplayable);\r\n    this.target = target;\r\n    this.minLength = minLength;\r\n    this.maxLength = maxLength;\r\n\r\n    this.configureRules();\r\n  }\r\n\r\n  /**\r\n   * A helper method to configure/add rules to the validation context.\r\n   */\r\n\r\n  configureRules() {\r\n    this.rules.push(\r\n      new IsNotNullOrUndefined(\r\n        'StringIsNotNull',\r\n        'The string target is null or undefined.',\r\n        this.target\r\n      )\r\n    );\r\n    if (this.target != null) {\r\n      this.rules.push(\r\n        new Range(\r\n          'TargetLengthIsWithinRange',\r\n          'The string value is not within the specified range.',\r\n          this.target.toString().length,\r\n          this.minLength,\r\n          this.maxLength\r\n        )\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { ServiceMessage } from './ServiceMessage';\r\nimport { MessageType } from './MessageType';\r\n\r\n/**\r\n * Use this class to manage the context of a single service call. This\r\n * class will contain a list of any service messages added during the processing\r\n * of a service request.\r\n */\r\nexport class ServiceContext {\r\n  /**\r\n   * A list of service messages added by the application during the processing of the\r\n   * specified service request.\r\n   */\r\n  Messages: Array<ServiceMessage> = new Array<ServiceMessage>();\r\n\r\n  /**\r\n   * Use this method to add a new message to the [ServiceContext].\r\n   */\r\n  addMessage(message: ServiceMessage) {\r\n    this.Messages.push(message);\r\n  }\r\n\r\n  /**\r\n   * Use to determine if the current [ServiceContext] contains any messages with type of [Error].\r\n   */\r\n  hasErrors(): boolean {\r\n    if (this.Messages && this.Messages.length > 0) {\r\n      const errorMessages = this.Messages.filter(\r\n        f => f.MessageType === MessageType.Error\r\n      );\r\n      if (errorMessages.length > 0) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Use to determine if the current [ServiceContext] does not contain any errors.\r\n   */\r\n  isGood(): boolean {\r\n    if (this.Messages && this.Messages.length > 0) {\r\n      const errorMessages = this.Messages.filter(\r\n        f => f.MessageType === MessageType.Error\r\n      );\r\n      if (errorMessages.length > 0) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import { MessageType } from './MessageType';\r\n\r\n/**\r\n * Use this class to create a message for the current [ServiceContext].\r\n */\r\nexport class ServiceMessage {\r\n  \r\n  /** Use to specify the name of the message. */\r\n  Name: string;\r\n  \r\n  /** Use to specify the message. */\r\n  Message: string;\r\n  \r\n  /** Use to specifiy  */\r\n  MessageType: MessageType;\r\n  \r\n  /** Use to indicate the source of the message. */\r\n  Source: string;\r\n  \r\n  /** Use to indicate if the specified message should be displayed to the user. */\r\n  DisplayToUser: boolean;\r\n\r\n  /**\r\n   * The constructor for the [ServiceMessage].\r\n   * @param name The name of the message.\r\n   * @param message The display text of the message.\r\n   * @param messageType: Indicates the type of message.\r\n   * @param source: Indicates the source of the message.\r\n   * @param displayToUser: Indicates if the message is displayable.\r\n   */\r\n\r\n  constructor(name: string, message?: string, messageType?: MessageType, source?: string);\r\n  /**\r\n   * The constructor for the [ServiceMessage].\r\n   * @param name The name of the message.\r\n   * @param message The display text of the message.\r\n   * @param messageType: Indicates the type of message.\r\n   * @param source: Indicates the source of the message.\r\n   */\r\n  constructor(\r\n    name: string,\r\n    message: string,\r\n    messageType?: MessageType,\r\n    source?: string\r\n  );\r\n  /**\r\n   * \r\n   * @param name The name of the message.\r\n   * @param message The display text of the message.\r\n   * @param messageType: Indicates the type of message.\r\n   * @param source: Indicates the source of the message.\r\n   * @param displayToUser Use to indicate if the specified message should be displayed to the user. \r\n   */\r\n  constructor(\r\n    name: string,\r\n    message: string,\r\n    messageType?: MessageType,\r\n    source?: string,\r\n    displayToUser: boolean = false\r\n  ) {\r\n    this.Name = name;\r\n    this.Message = message;\r\n    if (message) {\r\n      this.MessageType = messageType as MessageType;\r\n    }\r\n    if (source) {\r\n      this.Source = source as string;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use this extension method to add the name of the message.\r\n   * @param name The name of the service message.\r\n   */\r\n  WithName(name: string) {\r\n    this.Name = name;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Use this extension method to add the message text to the ServiceMessage item.\r\n   * @param message The display text of the service message.\r\n   */\r\n  WithMessage(message: string) {\r\n    this.Message = message;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Use this extension method to set the [MessageType] of the ServiceMessage item.\r\n   * @param messageType: Use to indicate the message type.\r\n   */\r\n  WithMessageType(messageType: MessageType) {\r\n    this.MessageType = messageType;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Use this extension method to set the [Source] of the ServiceMessage item.\r\n   * @param source: Use to indicate the source of the message.\r\n   */\r\n  WithSource(source: string) {\r\n    this.Source = source;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Use this extension method to set the [DisplayToUser] indicator of the ServiceMessage.\r\n   * @param displayToUser: A boolean value to indicate if the message can be displayed to the user.\r\n   */\r\n  WithDisplayToUser(displayToUser: boolean) {\r\n    this.DisplayToUser = displayToUser;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Use this method return a string representing the ServiceMessage.\r\n   */\r\n  toString() {\r\n    return `Name: ${this.Name}; Message: ${\r\n      this.Message\r\n    }; MessageType: ${this.MessageType.toString()}; Source: ${\r\n      this.Source\r\n    }; DisplayToUser: ${this.DisplayToUser}`;\r\n  }\r\n}\r\n","import { IValidationContext } from './IValidationContext';\r\nimport { ValidationContextState } from './ValidationContextState';\r\nimport { RuleResult } from '../rules/RuleResult';\r\nimport { RulePolicy } from '../rules/RulePolicy';\r\n\r\n/**\r\n * Use this class to create a new Validation Context for your application. With this\r\n * context, you can add rules and evaluate the rules.\r\n *\r\n * After the rules are evaluated, you can use the Validation Context to determine if there are\r\n * any rule violations.\r\n */\r\nexport class ValidationContext implements IValidationContext {\r\n\r\n  /**\r\n   * Use to indicate the state of the validation context. \r\n   */\r\n  state: ValidationContextState = ValidationContextState.NotEvaluated;\r\n\r\n  /**\r\n   * A list of results for all evaluated rules that belong to the validation context.\r\n   */\r\n  results: Array<RuleResult> = new Array<RuleResult>();\r\n\r\n  /**\r\n   * A list of rules for rendering.\r\n   */\r\n  rules: Array<RulePolicy> = new Array<RulePolicy>();\r\n\r\n  /**\r\n   * The source of the specified validation context instance.\r\n   */\r\n  source: string;\r\n\r\n  /**\r\n   * The constructor for the base validation context.\r\n   */\r\n  constructor() {\r\n    console.log(\r\n      'The [ValidationContext] is ready for action(s). All things are good until broken...'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Use this method to add a new rule to the ValidationContext.\r\n   */\r\n  addRule(rule: RulePolicy) {\r\n    if (this.source) {\r\n      rule.source = this.source;\r\n    }\r\n    this.rules.push(rule);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Use this extension method to set the [Source] for the current validation context.\r\n   * @param source\r\n   */\r\n  withSource(source: string) {\r\n    this.source = source;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Use this method to execute the rules added to the [ValidationContext].\r\n   */\r\n  renderRules() {\r\n    this.results = new Array<RuleResult>();\r\n    if (this.rules && this.rules.length < 1) {\r\n      return this;\r\n    }\r\n    this.rules\r\n      .sort(r => r.priority)\r\n      .forEach(r => this.results.push(r.execute()));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Use to determine if the validation context has any rule violations.\r\n   */\r\n  hasRuleViolations(): boolean {\r\n    let hasViolations = false;\r\n    if (this.rules) {\r\n      const ruleViolationsCount =\r\n        this.rules && this.rules.filter(r => r.isValid === false).length;\r\n      if (ruleViolationsCount > 0) {\r\n        hasViolations = true;\r\n      }\r\n    }\r\n    return hasViolations;\r\n  }\r\n\r\n  /**\r\n   * *Use to indicate if the validation context is valid - no rule violations.\r\n   */\r\n  get isValid(): boolean {\r\n    let isRuleValid = true;\r\n    if (this.rules) {\r\n      const invalidRulesCount = this.rules.filter(r => r.isValid === false)\r\n        .length;\r\n      if (invalidRulesCount > 0) {\r\n        isRuleValid = false;\r\n      }\r\n    }\r\n    return isRuleValid;\r\n  }\r\n}\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}
