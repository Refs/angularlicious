{"version":3,"file":"angularlicious-rules-engine.js.map","sources":["ng://@angularlicious/rules-engine/lib/rules-engine.module.ts","ng://@angularlicious/rules-engine/lib/rules/RuleResult.ts","ng://@angularlicious/rules-engine/lib/rules/RulePolicy.ts","ng://@angularlicious/rules-engine/lib/rules/CompositeRule.ts","ng://@angularlicious/rules-engine/lib/rules/SimpleRule.ts","ng://@angularlicious/rules-engine/lib/rules/IsNullOrUndefined.ts","ng://@angularlicious/rules-engine/lib/rules/IsNotNullOrUndefined.ts","ng://@angularlicious/rules-engine/lib/rules/IsTrue.ts","ng://@angularlicious/rules-engine/lib/rules/IsFalse.ts","ng://@angularlicious/rules-engine/lib/rules/Min.ts","ng://@angularlicious/rules-engine/lib/rules/Max.ts","ng://@angularlicious/rules-engine/lib/rules/Range.ts","ng://@angularlicious/rules-engine/lib/rules/AreEqual.ts","ng://@angularlicious/rules-engine/lib/rules/AreNotEqual.ts","ng://@angularlicious/rules-engine/lib/rules/StringIsNotNullEmptyRange.ts","ng://@angularlicious/rules-engine/lib/service/ServiceContext.ts","ng://@angularlicious/rules-engine/lib/service/ServiceMessage.ts","ng://@angularlicious/rules-engine/lib/validation/ValidationContext.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class AngularliciousRulesEngineModule {}\n","import { RulePolicy } from './RulePolicy';\nimport { CompositeRule } from './CompositeRule';\n\n/**\n * This class defines the result of a single rule evaluation.\n */\nexport class RuleResult {\n  /**\n   * Use to indicate if the rule result is valid or not.\n   */\n  isValid = false;\n\n  /**\n   * The rule that was evaluated.\n   */\n  rulePolicy: RulePolicy;\n\n  /**\n   * The rule message to use when the evaluation [isValid] is [false].\n   */\n  message: string;\n\n  /**\n   * The target item that was evaluated by the specified rule policy.\n   */\n  target: any;\n\n  /**\n   * Constructor for the RuleResult class.\n   * @param rulePolicy Use to specify the rule.\n   * @param target Use to specify the target to be evaluated by the rule.\n   */\n  constructor(rulePolicy: RulePolicy, target: any);\n  /**\n   * Constructor for the RuleResult class.\n   * @param rulePolicy Use to specify the rule.\n   */\n  constructor(rulePolicy: CompositeRule);\n  /**\n   * Constructor for the RuleResult class.\n   * @param rulePolicy Use to specify the rule.\n   * @param target Use to specify the target to be evaluated by the rule.\n   */\n  constructor(rulePolicy: RulePolicy, target?: any) {\n    if (rulePolicy != null) {\n      this.rulePolicy = rulePolicy;\n      this.isValid = rulePolicy.isValid;\n      this.message = rulePolicy.message;\n    }\n    this.target = target;\n  }\n}\n","import { IRuleComponent } from './IRuleComponent';\nimport { RuleResult } from './RuleResult';\nimport { RenderType } from './RenderType';\nimport { Severity } from './Severity';\n\n/**\n * This is the base class for all rules. All rules will extend from this class. New rules\n * should extend [SimpleRule] or [CompositeRule] - these rule abstractions extend [RulePolicy].\n */\nexport class RulePolicy implements IRuleComponent {\n  /** Use to indicate the status of the rule. Value is false when the rule contains violations. */\n  isValid = true;\n\n  /** Use to indicate the display message for a rule violation. */\n  message: string;\n\n  /** Use to indicate the name of the specified rule. */\n  name: string;\n\n  /** Use to indicate the priority value of the rule. Higher priority values are evaluated first. */\n  priority: number;\n\n  /** The specified rules result. */\n  result: RuleResult;\n\n  /** Use to indicate if the rule result is displayable. */\n  isDisplayable: boolean;\n\n  /** Use to determine how the rule is evaluated. */\n  renderType: RenderType = RenderType.EvaluateAllRules;\n\n  /** Use to indicate the severity for a rule violation. The default severity is [Exception]. */\n  severity: Severity = Severity.Exception;\n\n  /** Use to indicate the source of the specified rule. */\n  source: string;\n\n  /**\n   * Overloaded constructor for the [RulePolicy] class.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param isDisplayable: Indicates if the rule violation is displayble.\n   */\n  constructor(name: string, message: string, isDisplayable: boolean);\n  /**\n   * Overloaded constructor for the [RulePolicy] class.\n   * @param name The name of the rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param isDisplayable: Indicates if the rule violation is displayble.\n   * @param severity (Optional) Use to indicate the rule violation severity. Default is [Exception].\n   * @param priority (Optional) Use to indciate the rule's evaluation priority. Higher numeric values are priority. 0 is default and lowest priority.\n   */\n  constructor(\n    name: string,\n    message: string,\n    isDisplayable: boolean = false,\n    severity: Severity = Severity.Exception,\n    priority: number = 0\n  ) {\n    this.name = name;\n    this.message = message;\n    this.isDisplayable = isDisplayable;\n    this.priority = priority;\n    this.severity = severity;\n  }\n\n  /**\n   * Use to execute the rule. This is the [template] method of the [template method] design\n   * pattern. It will coordindate the execution of any required methods in the processing\n   * pipeline.\n   */\n  execute(): RuleResult {\n    console.log('Begin execution of RulePolicy: ' + this.name);\n    return this.render();\n  }\n\n  /**\n   * Each rule must implement this function and return a valid [RuleResult].\n   */\n  render(): RuleResult {\n    throw new Error(\n      'Each concrete rule must implement this function and return a valid Result.'\n    );\n  }\n}\n","import { RulePolicy } from './RulePolicy';\nimport { RuleResult } from './RuleResult';\n\n/**\n * Use the [CompositeRule] as a base class for a complex rule - a rule that contains\n * other rules.\n */\nexport class CompositeRule extends RulePolicy {\n  /**\n   * Indicates if the rule has any rule violations.\n   */\n  hasErrors = false;\n\n  /**\n   * A list of results for evaluated rules. Rules must be rendered/executed before\n   * any results are available.\n   */\n  results: Array<RuleResult> = new Array<RuleResult>();\n\n  /**\n   * A list of rules for the specified composite rule.\n   */\n  rules: Array<RulePolicy> = new Array<RulePolicy>();\n\n  /**\n   *\n   * @param name The name of the rule.\n   * @param message The message to display if the rule is violated.\n   * @param isDisplayable Indicates if the rule is displayable.\n   */\n  constructor(name: string, message: string, isDisplayable: boolean) {\n    super(name, message, isDisplayable);\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    this.rules\n      .sort(s => s.priority)\n      .forEach(r => this.results.push(r.execute()));\n    return this.processResults();\n  }\n\n  /**\n   * Use to determine if the composite rule has child-rules that are\n   * members of the specified rule.\n   */\n  public hasRules(): boolean {\n    if (this.rules && this.rules.length > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Use to process the results of the specified rule result collection. Composite\n   * rules will have one or more rule results for all child-rules.\n   *\n   * This method will return result with the evaluation summary and rule information.\n   */\n  processResults(): RuleResult {\n    if (this.results.filter(r => r.isValid === false).length > 0) {\n      this.isValid = false;\n      this.hasErrors = true;\n    }\n    return new RuleResult(this);\n  }\n}\n","import { RulePolicy } from './RulePolicy';\n\n/**\n * Use this class as a base [extends] class for simple rules. A simple contains\n * a single rule and target to evaluate.\n *\n * If you require a rule that will contain more than one rule, you should\n * use extend the [CompositeRule] class.\n */\nexport class SimpleRule extends RulePolicy {\n  /**\n   * The constructor for the simple rule.\n   * @param name The name of the rule.\n   * @param message The message to display if the rule is violated.\n   */\n  constructor(name: string, message: string, isDisplayable: boolean) {\n    super(name, message, isDisplayable);\n  }\n}\n","import { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\n\n/**\n * Use to determine if the target is [null] or [undefined].\n */\nexport class IsNullOrUndefined extends SimpleRule {\n  /**\n   * The target for the specified rule evaluation.\n   */\n  target;\n\n  /**\n   * The constructor for the [IsNullOrUndefined] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: any,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    if (\n      this.target == null ||\n      typeof this.target === undefined ||\n      typeof this.target === 'undefined'\n    ) {\n      this.isValid = true;\n    } else {\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\n\n/**\n * Use to determine if the target is NOT [null] or [undefined].\n */\nexport class IsNotNullOrUndefined extends SimpleRule {\n  /**\n   * The target for the specified rule evaluation.\n   */\n  target;\n\n  /**\n   * The constructor for the [IsNotNullOrUndefined] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: any,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    if (\n      this.target == null ||\n      this.target === null ||\n      typeof this.target === 'undefined'\n    ) {\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\n\n/**\n * Use to determine if the target is truthy.\n */\nexport class IsTrue extends SimpleRule {\n  /**\n   * The target for the specified rule evaluation.\n   */\n  target: boolean;\n\n  /**\n   * The constructor for the [IsTrue] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [true].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: boolean,\n    isDisplayable: boolean = true\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    this.isValid = true;\n    if (this.target === false) {\n      //if(not true)-->false;\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\n\n/**\n * Use to indicate if the value is falsy.\n */\nexport class IsFalse extends SimpleRule {\n  /**\n   * Use to indicate the target value to evaluate.\n   */\n  target: boolean;\n\n  /**\n   * The constructor for the [IsFalse] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: boolean,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    if (this.target) {\n      //if(true)-->false;\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\n\nimport { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\nimport { Primitive } from './Primitive';\n\n/**\n * Use the [Min] rule to determine if the target value is equal to or greater than the minimum\n * allowed value [comparison].\n */\nexport class Min extends SimpleRule {\n  /**\n   * The target for the rule instance.\n   */\n  target: Primitive;\n\n  /**\n   * The comparison item for the specified rule instance.\n   */\n  comparison: Primitive;\n\n  /**\n   * The constructor for the [Min] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param comparison The comparison target the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: Primitive,\n    comparison: Primitive,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n    this.comparison = comparison;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    const compareResult = compare(this.target, this.comparison, true);\n    if (compareResult === CompareResult.Less) {\n      this.isValid = false; //must be equal to or greater than the comparison value;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\n\nimport { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\nimport { Primitive } from './Primitive';\n\n/**\n * Use the [Max] rule to determine if the target value is equal to or less than\n * the comparison value.\n */\nexport class Max extends SimpleRule {\n  /**\n   * The target for the rule instance.\n   */\n  target: Primitive;\n\n  /**\n   * The comparison item for the specified rule instance.\n   */\n  comparison: Primitive;\n\n  /**\n   * The constructor for the [Max] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param comparison The comparison target the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: Primitive,\n    comparison: Primitive,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n    this.comparison = comparison;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    const compareResult = compare(this.target, this.comparison, true);\n    if (compareResult === CompareResult.Greater) {\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\n\nimport { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\nimport { Primitive } from './Primitive';\n\nimport { CompositeRule } from './CompositeRule';\nimport { IsNotNullOrUndefined } from './IsNotNullOrUndefined';\nimport { Min } from './Min';\nimport { Max } from './Max';\n\n/**\n * Use this rule to determine if the specified target is within the specified range (start and end) values.\n *\n * The range values are inclusive.\n *\n * Ex: 1 is within 1 and 3. The target is valid.\n * Ex: 2 is within 1 and 3. The target is valid.\n * Ex: 0 is not within 1 and 3. The target is not valid.\n * Ex: 4 is not within 1 and 3. The target is not valid.\n */\nexport class Range extends CompositeRule {\n  /**\n   * Use to indicate the end value of the range.\n   */\n  end: number;\n  /**\n   * Use to indicate the start value of the range.\n   */\n  start: number;\n  /**\n   * Use to indicate the [primitive] value that will be evaluated. The value\n   * must be within the [start] and the [end] value to be valid.\n   */\n  target: Primitive;\n\n  /**\n   * Constructor for the [Range] rule.\n   * @param name The name of the rule.\n   * @param message: A message to display if the rule is violated.\n   * @param target The target object that the rules will be applied to.\n   * @param start The start range value - the lowest allowed boundary value.\n   * @param end The end range value - the highest allowed boundary value.\n   * @param isDisplayable: (Optional) Indicates if the rule violation may be displayed or visible to the caller or client. Default is [false].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: Primitive,\n    start: number,\n    end: number,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n    this.start = start;\n    this.end = end;\n    this.isDisplayable = isDisplayable;\n\n    this.rules.push(\n      new IsNotNullOrUndefined(\n        'TargetIsNotNull',\n        'The target is null or undefined.',\n        this.target\n      )\n    );\n\n    if (this.target != null) {\n      this.rules.push(\n        new Min(\n          'MinValue',\n          'The value must be equal to or greater than the start range value.',\n          this.target,\n          this.start\n        )\n      );\n      this.rules.push(\n        new Max(\n          'MaxValue',\n          'The value must be equal to or less than the end range value.',\n          this.target,\n          this.end\n        )\n      );\n    }\n  }\n}\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\n\nimport { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\nimport { Primitive } from './Primitive';\n\n/**\n * Use to determine if the target is equal to the comparison target.\n */\nexport class AreEqual extends SimpleRule {\n  /**\n   * The target for the rule instance.\n   */\n  target: Primitive;\n\n  /**\n   * The comparison item for the specified rule instance.\n   */\n  comparison: Primitive;\n\n  /**\n   * The constructor for the [AreEqualRule] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param comparison The comparison target the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [true].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: Primitive,\n    comparison: Primitive,\n    isDisplayable: boolean = true\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n    this.comparison = comparison;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    if (compare(this.target, this.comparison, true) !== CompareResult.Equal) {\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\n\nimport { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\nimport { Primitive } from './Primitive';\n\n/**\n * Use to determine if the target is not equal to the comparison target.\n */\nexport class AreNotEqual extends SimpleRule {\n  /**\n   * The target for the rule instance.\n   */\n  target: Primitive;\n\n  /**\n   * The comparison item for the specified rule instance.\n   */\n  comparison: Primitive;\n\n  /**\n   * The constructor for the [AreNotEqualRule] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param comparison The comparison target the rules are evaluated against.\n   * @param isDisplayable: (Optional) Indicates if the rule violation is displayble. Default is [true].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: Primitive,\n    comparison: Primitive,\n    isDisplayable: boolean = true\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n    this.comparison = comparison;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    if (compare(this.target, this.comparison, true) === CompareResult.Equal) {\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\n\nimport { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\nimport { Primitive } from './Primitive';\n\nimport { CompositeRule } from './CompositeRule';\nimport { IsNotNullOrUndefined } from './IsNotNullOrUndefined';\nimport { Range } from './Range';\n\n/**\n * Use this rule to validate a string target. A valid string is not null or undefined; and it\n * is within the specified minimum and maxiumum length.\n */\nexport class StringIsNotNullEmptyRange extends CompositeRule {\n  /**\n   * Use to indicate the maximum length of the target value.\n   */\n  maxLength: number;\n\n  /**\n   * Use to indicate the minimum lenth of the target value.\n   */\n  minLength: number;\n\n  /**\n   * Use to provide the target [Primitive] to evaluate for the specified rule.\n   */\n  target: Primitive;\n\n  /**\n   * The constructor for the [StringIsNotNullEmptyRangeRule].\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rule(s) will be evaluated against.\n   * @param minLength The minimum allowed length of the target value.\n   * @param maxLength The maximum allowed length of the target value.\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: Primitive,\n    minLength: number,\n    maxLength: number,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n\n    this.configureRules();\n  }\n\n  /**\n   * A helper method to configure/add rules to the validation context.\n   */\n\n  configureRules() {\n    this.rules.push(\n      new IsNotNullOrUndefined(\n        'StringIsNotNull',\n        'The string target is null or undefined.',\n        this.target\n      )\n    );\n    if (this.target != null) {\n      this.rules.push(\n        new Range(\n          'TargetLengthIsWithinRange',\n          'The string value is not within the specified range.',\n          this.target.toString().length,\n          this.minLength,\n          this.maxLength\n        )\n      );\n    }\n  }\n}\n","import { ServiceMessage } from './ServiceMessage';\nimport { MessageType } from './MessageType';\n\n/**\n * Use this class to manage the context of a single service call. This\n * class will contain a list of any service messages added during the processing\n * of a service request.\n */\nexport class ServiceContext {\n  /**\n   * A list of service messages added by the application during the processing of the\n   * specified service request.\n   */\n  Messages: Array<ServiceMessage> = new Array<ServiceMessage>();\n\n  /**\n   * Use this method to add a new message to the [ServiceContext].\n   */\n  addMessage(message: ServiceMessage) {\n    this.Messages.push(message);\n  }\n\n  /**\n   * Use to determine if the current [ServiceContext] contains any messages with type of [Error].\n   */\n  hasErrors(): boolean {\n    if (this.Messages && this.Messages.length > 0) {\n      const errorMessages = this.Messages.filter(\n        f => f.MessageType === MessageType.Error\n      );\n      if (errorMessages.length > 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Use to determine if the current [ServiceContext] does not contain any errors.\n   */\n  isGood(): boolean {\n    if (this.Messages && this.Messages.length > 0) {\n      const errorMessages = this.Messages.filter(\n        f => f.MessageType === MessageType.Error\n      );\n      if (errorMessages.length > 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { MessageType } from './MessageType';\n\n/**\n * Use this class to create a message for the current [ServiceContext].\n */\nexport class ServiceMessage {\n  /** Use to specify the name of the message. */\n  Name: string;\n\n  /** Use to specify the message. */\n  Message: string;\n\n  /** Use to specifiy  */\n  MessageType: MessageType;\n\n  /** Use to indicate the source of the message. */\n  Source: string;\n\n  /** Use to indicate if the specified message should be displayed to the user. */\n  DisplayToUser: boolean;\n\n  /**\n   * The constructor for the [ServiceMessage].\n   * @param name The name of the message.\n   * @param message The display text of the message.\n   * @param messageType: Indicates the type of message.\n   * @param source: Indicates the source of the message.\n   * @param displayToUser: Indicates if the message is displayable.\n   */\n\n  constructor(\n    name: string,\n    message?: string,\n    messageType?: MessageType,\n    source?: string\n  );\n  /**\n   * The constructor for the [ServiceMessage].\n   * @param name The name of the message.\n   * @param message The display text of the message.\n   * @param messageType: Indicates the type of message.\n   * @param source: Indicates the source of the message.\n   */\n  constructor(\n    name: string,\n    message: string,\n    messageType?: MessageType,\n    source?: string\n  );\n  /**\n   *\n   * @param name The name of the message.\n   * @param message The display text of the message.\n   * @param messageType: Indicates the type of message.\n   * @param source: Indicates the source of the message.\n   * @param displayToUser Use to indicate if the specified message should be displayed to the user.\n   */\n  constructor(\n    name: string,\n    message: string,\n    messageType?: MessageType,\n    source?: string,\n    displayToUser: boolean = false\n  ) {\n    this.Name = name;\n    this.Message = message;\n    if (message) {\n      this.MessageType = messageType as MessageType;\n    }\n    if (source) {\n      this.Source = source as string;\n    }\n  }\n\n  /**\n   * Use this extension method to add the name of the message.\n   * @param name The name of the service message.\n   */\n  WithName(name: string) {\n    this.Name = name;\n    return this;\n  }\n\n  /**\n   * Use this extension method to add the message text to the ServiceMessage item.\n   * @param message The display text of the service message.\n   */\n  WithMessage(message: string) {\n    this.Message = message;\n    return this;\n  }\n\n  /**\n   * Use this extension method to set the [MessageType] of the ServiceMessage item.\n   * @param messageType: Use to indicate the message type.\n   */\n  WithMessageType(messageType: MessageType) {\n    this.MessageType = messageType;\n    return this;\n  }\n\n  /**\n   * Use this extension method to set the [Source] of the ServiceMessage item.\n   * @param source: Use to indicate the source of the message.\n   */\n  WithSource(source: string) {\n    this.Source = source;\n    return this;\n  }\n\n  /**\n   * Use this extension method to set the [DisplayToUser] indicator of the ServiceMessage.\n   * @param displayToUser: A boolean value to indicate if the message can be displayed to the user.\n   */\n  WithDisplayToUser(displayToUser: boolean) {\n    this.DisplayToUser = displayToUser;\n    return this;\n  }\n\n  /**\n   * Use this method return a string representing the ServiceMessage.\n   */\n  toString() {\n    return `Name: ${this.Name}; Message: ${\n      this.Message\n    }; MessageType: ${this.MessageType.toString()}; Source: ${\n      this.Source\n    }; DisplayToUser: ${this.DisplayToUser}`;\n  }\n}\n","import { IValidationContext } from './IValidationContext';\nimport { ValidationContextState } from './ValidationContextState';\nimport { RuleResult } from '../rules/RuleResult';\nimport { RulePolicy } from '../rules/RulePolicy';\n\n/**\n * Use this class to create a new Validation Context for your application. With this\n * context, you can add rules and evaluate the rules.\n *\n * After the rules are evaluated, you can use the Validation Context to determine if there are\n * any rule violations.\n */\nexport class ValidationContext implements IValidationContext {\n  /**\n   * Use to indicate the state of the validation context.\n   */\n  state: ValidationContextState = ValidationContextState.NotEvaluated;\n\n  /**\n   * A list of results for all evaluated rules that belong to the validation context.\n   */\n  results: Array<RuleResult> = new Array<RuleResult>();\n\n  /**\n   * A list of rules for rendering.\n   */\n  rules: Array<RulePolicy> = new Array<RulePolicy>();\n\n  /**\n   * The source of the specified validation context instance.\n   */\n  source: string;\n\n  /**\n   * The constructor for the base validation context.\n   */\n  constructor() {\n    console.log(\n      'The [ValidationContext] is ready for action(s). All things are good until broken...'\n    );\n  }\n\n  /**\n   * Use this method to add a new rule to the ValidationContext.\n   */\n  addRule(rule: RulePolicy) {\n    if (this.source) {\n      rule.source = this.source;\n    }\n    this.rules.push(rule);\n    return this;\n  }\n\n  /**\n   * Use this extension method to set the [Source] for the current validation context.\n   * @param source\n   */\n  withSource(source: string) {\n    this.source = source;\n    return this;\n  }\n\n  /**\n   * Use this method to execute the rules added to the [ValidationContext].\n   */\n  renderRules() {\n    this.results = new Array<RuleResult>();\n    if (this.rules && this.rules.length < 1) {\n      return this;\n    }\n    this.rules\n      .sort(r => r.priority)\n      .forEach(r => this.results.push(r.execute()));\n    return this;\n  }\n\n  /**\n   * Use to determine if the validation context has any rule violations.\n   */\n  hasRuleViolations(): boolean {\n    let hasViolations = false;\n    if (this.rules) {\n      const ruleViolationsCount =\n        this.rules && this.rules.filter(r => r.isValid === false).length;\n      if (ruleViolationsCount > 0) {\n        hasViolations = true;\n      }\n    }\n    return hasViolations;\n  }\n\n  /**\n   * *Use to indicate if the validation context is valid - no rule violations.\n   */\n  get isValid(): boolean {\n    let isRuleValid = true;\n    if (this.rules) {\n      const invalidRulesCount = this.rules.filter(r => r.isValid === false)\n        .length;\n      if (invalidRulesCount > 0) {\n        isRuleValid = false;\n      }\n    }\n    return isRuleValid;\n  }\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
