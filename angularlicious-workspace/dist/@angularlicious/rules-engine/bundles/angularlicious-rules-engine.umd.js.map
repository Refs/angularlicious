{"version":3,"file":"angularlicious-rules-engine.umd.js.map","sources":["ng://@angularlicious/rules-engine/lib/rules-engine.module.ts","ng://@angularlicious/rules-engine/lib/rules/RuleResult.ts","ng://@angularlicious/rules-engine/lib/rules/RulePolicy.ts",null,"ng://@angularlicious/rules-engine/lib/rules/CompositeRule.ts","ng://@angularlicious/rules-engine/lib/rules/SimpleRule.ts","ng://@angularlicious/rules-engine/lib/rules/IsNullOrUndefined.ts","ng://@angularlicious/rules-engine/lib/rules/IsNotNullOrUndefined.ts","ng://@angularlicious/rules-engine/lib/rules/IsTrue.ts","ng://@angularlicious/rules-engine/lib/rules/IsFalse.ts","ng://@angularlicious/rules-engine/lib/rules/Min.ts","ng://@angularlicious/rules-engine/lib/rules/Max.ts","ng://@angularlicious/rules-engine/lib/rules/Range.ts","ng://@angularlicious/rules-engine/lib/rules/AreEqual.ts","ng://@angularlicious/rules-engine/lib/rules/AreNotEqual.ts","ng://@angularlicious/rules-engine/lib/rules/StringIsNotNullEmptyRange.ts","ng://@angularlicious/rules-engine/lib/service/ServiceContext.ts","ng://@angularlicious/rules-engine/lib/service/ServiceMessage.ts","ng://@angularlicious/rules-engine/lib/validation/ValidationContext.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class AngularliciousRulesEngineModule {}\n","import { RulePolicy } from './RulePolicy';\nimport { CompositeRule } from './CompositeRule';\n\n/**\n * This class defines the result of a single rule evaluation.\n */\nexport class RuleResult {\n  /**\n   * Use to indicate if the rule result is valid or not.\n   */\n  isValid = false;\n\n  /**\n   * The rule that was evaluated.\n   */\n  rulePolicy: RulePolicy;\n\n  /**\n   * The rule message to use when the evaluation [isValid] is [false].\n   */\n  message: string;\n\n  /**\n   * The target item that was evaluated by the specified rule policy.\n   */\n  target: any;\n\n  /**\n   * Constructor for the RuleResult class.\n   * @param rulePolicy Use to specify the rule.\n   * @param target Use to specify the target to be evaluated by the rule.\n   */\n  constructor(rulePolicy: RulePolicy, target: any);\n  /**\n   * Constructor for the RuleResult class.\n   * @param rulePolicy Use to specify the rule.\n   */\n  constructor(rulePolicy: CompositeRule);\n  /**\n   * Constructor for the RuleResult class.\n   * @param rulePolicy Use to specify the rule.\n   * @param target Use to specify the target to be evaluated by the rule.\n   */\n  constructor(rulePolicy: RulePolicy, target?: any) {\n    if (rulePolicy != null) {\n      this.rulePolicy = rulePolicy;\n      this.isValid = rulePolicy.isValid;\n      this.message = rulePolicy.message;\n    }\n    this.target = target;\n  }\n}\n","import { IRuleComponent } from './IRuleComponent';\nimport { RuleResult } from './RuleResult';\nimport { RenderType } from './RenderType';\nimport { Severity } from './Severity';\n\n/**\n * This is the base class for all rules. All rules will extend from this class. New rules\n * should extend [SimpleRule] or [CompositeRule] - these rule abstractions extend [RulePolicy].\n */\nexport class RulePolicy implements IRuleComponent {\n  /** Use to indicate the status of the rule. Value is false when the rule contains violations. */\n  isValid = true;\n\n  /** Use to indicate the display message for a rule violation. */\n  message: string;\n\n  /** Use to indicate the name of the specified rule. */\n  name: string;\n\n  /** Use to indicate the priority value of the rule. Higher priority values are evaluated first. */\n  priority: number;\n\n  /** The specified rules result. */\n  result: RuleResult;\n\n  /** Use to indicate if the rule result is displayable. */\n  isDisplayable: boolean;\n\n  /** Use to determine how the rule is evaluated. */\n  renderType: RenderType = RenderType.EvaluateAllRules;\n\n  /** Use to indicate the severity for a rule violation. The default severity is [Exception]. */\n  severity: Severity = Severity.Exception;\n\n  /** Use to indicate the source of the specified rule. */\n  source: string;\n\n  /**\n   * Overloaded constructor for the [RulePolicy] class.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param isDisplayable: Indicates if the rule violation is displayble.\n   */\n  constructor(name: string, message: string, isDisplayable: boolean);\n  /**\n   * Overloaded constructor for the [RulePolicy] class.\n   * @param name The name of the rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param isDisplayable: Indicates if the rule violation is displayble.\n   * @param severity (Optional) Use to indicate the rule violation severity. Default is [Exception].\n   * @param priority (Optional) Use to indciate the rule's evaluation priority. Higher numeric values are priority. 0 is default and lowest priority.\n   */\n  constructor(\n    name: string,\n    message: string,\n    isDisplayable: boolean = false,\n    severity: Severity = Severity.Exception,\n    priority: number = 0\n  ) {\n    this.name = name;\n    this.message = message;\n    this.isDisplayable = isDisplayable;\n    this.priority = priority;\n    this.severity = severity;\n  }\n\n  /**\n   * Use to execute the rule. This is the [template] method of the [template method] design\n   * pattern. It will coordindate the execution of any required methods in the processing\n   * pipeline.\n   */\n  execute(): RuleResult {\n    console.log('Begin execution of RulePolicy: ' + this.name);\n    return this.render();\n  }\n\n  /**\n   * Each rule must implement this function and return a valid [RuleResult].\n   */\n  render(): RuleResult {\n    throw new Error(\n      'Each concrete rule must implement this function and return a valid Result.'\n    );\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { RulePolicy } from './RulePolicy';\nimport { RuleResult } from './RuleResult';\n\n/**\n * Use the [CompositeRule] as a base class for a complex rule - a rule that contains\n * other rules.\n */\nexport class CompositeRule extends RulePolicy {\n  /**\n   * Indicates if the rule has any rule violations.\n   */\n  hasErrors = false;\n\n  /**\n   * A list of results for evaluated rules. Rules must be rendered/executed before\n   * any results are available.\n   */\n  results: Array<RuleResult> = new Array<RuleResult>();\n\n  /**\n   * A list of rules for the specified composite rule.\n   */\n  rules: Array<RulePolicy> = new Array<RulePolicy>();\n\n  /**\n   *\n   * @param name The name of the rule.\n   * @param message The message to display if the rule is violated.\n   * @param isDisplayable Indicates if the rule is displayable.\n   */\n  constructor(name: string, message: string, isDisplayable: boolean) {\n    super(name, message, isDisplayable);\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    this.rules\n      .sort(s => s.priority)\n      .forEach(r => this.results.push(r.execute()));\n    return this.processResults();\n  }\n\n  /**\n   * Use to determine if the composite rule has child-rules that are\n   * members of the specified rule.\n   */\n  public hasRules(): boolean {\n    if (this.rules && this.rules.length > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Use to process the results of the specified rule result collection. Composite\n   * rules will have one or more rule results for all child-rules.\n   *\n   * This method will return result with the evaluation summary and rule information.\n   */\n  processResults(): RuleResult {\n    if (this.results.filter(r => r.isValid === false).length > 0) {\n      this.isValid = false;\n      this.hasErrors = true;\n    }\n    return new RuleResult(this);\n  }\n}\n","import { RulePolicy } from './RulePolicy';\n\n/**\n * Use this class as a base [extends] class for simple rules. A simple contains\n * a single rule and target to evaluate.\n *\n * If you require a rule that will contain more than one rule, you should\n * use extend the [CompositeRule] class.\n */\nexport class SimpleRule extends RulePolicy {\n  /**\n   * The constructor for the simple rule.\n   * @param name The name of the rule.\n   * @param message The message to display if the rule is violated.\n   */\n  constructor(name: string, message: string, isDisplayable: boolean) {\n    super(name, message, isDisplayable);\n  }\n}\n","import { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\n\n/**\n * Use to determine if the target is [null] or [undefined].\n */\nexport class IsNullOrUndefined extends SimpleRule {\n  /**\n   * The target for the specified rule evaluation.\n   */\n  target;\n\n  /**\n   * The constructor for the [IsNullOrUndefined] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: any,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    if (\n      this.target == null ||\n      typeof this.target === undefined ||\n      typeof this.target === 'undefined'\n    ) {\n      this.isValid = true;\n    } else {\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\n\n/**\n * Use to determine if the target is NOT [null] or [undefined].\n */\nexport class IsNotNullOrUndefined extends SimpleRule {\n  /**\n   * The target for the specified rule evaluation.\n   */\n  target;\n\n  /**\n   * The constructor for the [IsNotNullOrUndefined] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: any,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    if (\n      this.target == null ||\n      this.target === null ||\n      typeof this.target === 'undefined'\n    ) {\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\n\n/**\n * Use to determine if the target is truthy.\n */\nexport class IsTrue extends SimpleRule {\n  /**\n   * The target for the specified rule evaluation.\n   */\n  target: boolean;\n\n  /**\n   * The constructor for the [IsTrue] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [true].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: boolean,\n    isDisplayable: boolean = true\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    this.isValid = true;\n    if (this.target === false) {\n      //if(not true)-->false;\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\n\n/**\n * Use to indicate if the value is falsy.\n */\nexport class IsFalse extends SimpleRule {\n  /**\n   * Use to indicate the target value to evaluate.\n   */\n  target: boolean;\n\n  /**\n   * The constructor for the [IsFalse] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: boolean,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    if (this.target) {\n      //if(true)-->false;\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\n\nimport { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\nimport { Primitive } from './Primitive';\n\n/**\n * Use the [Min] rule to determine if the target value is equal to or greater than the minimum\n * allowed value [comparison].\n */\nexport class Min extends SimpleRule {\n  /**\n   * The target for the rule instance.\n   */\n  target: Primitive;\n\n  /**\n   * The comparison item for the specified rule instance.\n   */\n  comparison: Primitive;\n\n  /**\n   * The constructor for the [Min] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param comparison The comparison target the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: Primitive,\n    comparison: Primitive,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n    this.comparison = comparison;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    const compareResult = compare(this.target, this.comparison, true);\n    if (compareResult === CompareResult.Less) {\n      this.isValid = false; //must be equal to or greater than the comparison value;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\n\nimport { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\nimport { Primitive } from './Primitive';\n\n/**\n * Use the [Max] rule to determine if the target value is equal to or less than\n * the comparison value.\n */\nexport class Max extends SimpleRule {\n  /**\n   * The target for the rule instance.\n   */\n  target: Primitive;\n\n  /**\n   * The comparison item for the specified rule instance.\n   */\n  comparison: Primitive;\n\n  /**\n   * The constructor for the [Max] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param comparison The comparison target the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [false].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: Primitive,\n    comparison: Primitive,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n    this.comparison = comparison;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    const compareResult = compare(this.target, this.comparison, true);\n    if (compareResult === CompareResult.Greater) {\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\n\nimport { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\nimport { Primitive } from './Primitive';\n\nimport { CompositeRule } from './CompositeRule';\nimport { IsNotNullOrUndefined } from './IsNotNullOrUndefined';\nimport { Min } from './Min';\nimport { Max } from './Max';\n\n/**\n * Use this rule to determine if the specified target is within the specified range (start and end) values.\n *\n * The range values are inclusive.\n *\n * Ex: 1 is within 1 and 3. The target is valid.\n * Ex: 2 is within 1 and 3. The target is valid.\n * Ex: 0 is not within 1 and 3. The target is not valid.\n * Ex: 4 is not within 1 and 3. The target is not valid.\n */\nexport class Range extends CompositeRule {\n  /**\n   * Use to indicate the end value of the range.\n   */\n  end: number;\n  /**\n   * Use to indicate the start value of the range.\n   */\n  start: number;\n  /**\n   * Use to indicate the [primitive] value that will be evaluated. The value\n   * must be within the [start] and the [end] value to be valid.\n   */\n  target: Primitive;\n\n  /**\n   * Constructor for the [Range] rule.\n   * @param name The name of the rule.\n   * @param message: A message to display if the rule is violated.\n   * @param target The target object that the rules will be applied to.\n   * @param start The start range value - the lowest allowed boundary value.\n   * @param end The end range value - the highest allowed boundary value.\n   * @param isDisplayable: (Optional) Indicates if the rule violation may be displayed or visible to the caller or client. Default is [false].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: Primitive,\n    start: number,\n    end: number,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n    this.start = start;\n    this.end = end;\n    this.isDisplayable = isDisplayable;\n\n    this.rules.push(\n      new IsNotNullOrUndefined(\n        'TargetIsNotNull',\n        'The target is null or undefined.',\n        this.target\n      )\n    );\n\n    if (this.target != null) {\n      this.rules.push(\n        new Min(\n          'MinValue',\n          'The value must be equal to or greater than the start range value.',\n          this.target,\n          this.start\n        )\n      );\n      this.rules.push(\n        new Max(\n          'MaxValue',\n          'The value must be equal to or less than the end range value.',\n          this.target,\n          this.end\n        )\n      );\n    }\n  }\n}\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\n\nimport { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\nimport { Primitive } from './Primitive';\n\n/**\n * Use to determine if the target is equal to the comparison target.\n */\nexport class AreEqual extends SimpleRule {\n  /**\n   * The target for the rule instance.\n   */\n  target: Primitive;\n\n  /**\n   * The comparison item for the specified rule instance.\n   */\n  comparison: Primitive;\n\n  /**\n   * The constructor for the [AreEqualRule] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param comparison The comparison target the rules are evaluated against.\n   * @param isDisplayable: Indicates if the rule violation is displayble. Default value is [true].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: Primitive,\n    comparison: Primitive,\n    isDisplayable: boolean = true\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n    this.comparison = comparison;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    if (compare(this.target, this.comparison, true) !== CompareResult.Equal) {\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\n\nimport { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\nimport { Primitive } from './Primitive';\n\n/**\n * Use to determine if the target is not equal to the comparison target.\n */\nexport class AreNotEqual extends SimpleRule {\n  /**\n   * The target for the rule instance.\n   */\n  target: Primitive;\n\n  /**\n   * The comparison item for the specified rule instance.\n   */\n  comparison: Primitive;\n\n  /**\n   * The constructor for the [AreNotEqualRule] rule.\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rules are evaluated against.\n   * @param comparison The comparison target the rules are evaluated against.\n   * @param isDisplayable: (Optional) Indicates if the rule violation is displayble. Default is [true].\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: Primitive,\n    comparison: Primitive,\n    isDisplayable: boolean = true\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n    this.comparison = comparison;\n  }\n\n  /**\n   * Use to render the evaluated result for the specified rule. This method\n   * returns a [RuleResult] with the evaluated result and rule information.\n   */\n  render(): RuleResult {\n    if (compare(this.target, this.comparison, true) === CompareResult.Equal) {\n      this.isValid = false;\n    }\n    return new RuleResult(this, this.target);\n  }\n}\n","import { CompareResult } from 'typescript-dotnet-commonjs/System/CompareResult';\nimport { compare } from 'typescript-dotnet-commonjs/System/Compare';\n\nimport { SimpleRule } from './SimpleRule';\nimport { RuleResult } from './RuleResult';\nimport { Primitive } from './Primitive';\n\nimport { CompositeRule } from './CompositeRule';\nimport { IsNotNullOrUndefined } from './IsNotNullOrUndefined';\nimport { Range } from './Range';\n\n/**\n * Use this rule to validate a string target. A valid string is not null or undefined; and it\n * is within the specified minimum and maxiumum length.\n */\nexport class StringIsNotNullEmptyRange extends CompositeRule {\n  /**\n   * Use to indicate the maximum length of the target value.\n   */\n  maxLength: number;\n\n  /**\n   * Use to indicate the minimum lenth of the target value.\n   */\n  minLength: number;\n\n  /**\n   * Use to provide the target [Primitive] to evaluate for the specified rule.\n   */\n  target: Primitive;\n\n  /**\n   * The constructor for the [StringIsNotNullEmptyRangeRule].\n   * @param name The name of the rule.\n   * @param message The message to display when the rule is violated.\n   * @param target The target that the rule(s) will be evaluated against.\n   * @param minLength The minimum allowed length of the target value.\n   * @param maxLength The maximum allowed length of the target value.\n   */\n  constructor(\n    name: string,\n    message: string,\n    target: Primitive,\n    minLength: number,\n    maxLength: number,\n    isDisplayable: boolean = false\n  ) {\n    super(name, message, isDisplayable);\n    this.target = target;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n\n    this.configureRules();\n  }\n\n  /**\n   * A helper method to configure/add rules to the validation context.\n   */\n\n  configureRules() {\n    this.rules.push(\n      new IsNotNullOrUndefined(\n        'StringIsNotNull',\n        'The string target is null or undefined.',\n        this.target\n      )\n    );\n    if (this.target != null) {\n      this.rules.push(\n        new Range(\n          'TargetLengthIsWithinRange',\n          'The string value is not within the specified range.',\n          this.target.toString().length,\n          this.minLength,\n          this.maxLength\n        )\n      );\n    }\n  }\n}\n","import { ServiceMessage } from './ServiceMessage';\nimport { MessageType } from './MessageType';\n\n/**\n * Use this class to manage the context of a single service call. This\n * class will contain a list of any service messages added during the processing\n * of a service request.\n */\nexport class ServiceContext {\n  /**\n   * A list of service messages added by the application during the processing of the\n   * specified service request.\n   */\n  Messages: Array<ServiceMessage> = new Array<ServiceMessage>();\n\n  /**\n   * Use this method to add a new message to the [ServiceContext].\n   */\n  addMessage(message: ServiceMessage) {\n    this.Messages.push(message);\n  }\n\n  /**\n   * Use to determine if the current [ServiceContext] contains any messages with type of [Error].\n   */\n  hasErrors(): boolean {\n    if (this.Messages && this.Messages.length > 0) {\n      const errorMessages = this.Messages.filter(\n        f => f.MessageType === MessageType.Error\n      );\n      if (errorMessages.length > 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Use to determine if the current [ServiceContext] does not contain any errors.\n   */\n  isGood(): boolean {\n    if (this.Messages && this.Messages.length > 0) {\n      const errorMessages = this.Messages.filter(\n        f => f.MessageType === MessageType.Error\n      );\n      if (errorMessages.length > 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { MessageType } from './MessageType';\n\n/**\n * Use this class to create a message for the current [ServiceContext].\n */\nexport class ServiceMessage {\n  /** Use to specify the name of the message. */\n  Name: string;\n\n  /** Use to specify the message. */\n  Message: string;\n\n  /** Use to specifiy  */\n  MessageType: MessageType;\n\n  /** Use to indicate the source of the message. */\n  Source: string;\n\n  /** Use to indicate if the specified message should be displayed to the user. */\n  DisplayToUser: boolean;\n\n  /**\n   * The constructor for the [ServiceMessage].\n   * @param name The name of the message.\n   * @param message The display text of the message.\n   * @param messageType: Indicates the type of message.\n   * @param source: Indicates the source of the message.\n   * @param displayToUser: Indicates if the message is displayable.\n   */\n\n  constructor(\n    name: string,\n    message?: string,\n    messageType?: MessageType,\n    source?: string\n  );\n  /**\n   * The constructor for the [ServiceMessage].\n   * @param name The name of the message.\n   * @param message The display text of the message.\n   * @param messageType: Indicates the type of message.\n   * @param source: Indicates the source of the message.\n   */\n  constructor(\n    name: string,\n    message: string,\n    messageType?: MessageType,\n    source?: string\n  );\n  /**\n   *\n   * @param name The name of the message.\n   * @param message The display text of the message.\n   * @param messageType: Indicates the type of message.\n   * @param source: Indicates the source of the message.\n   * @param displayToUser Use to indicate if the specified message should be displayed to the user.\n   */\n  constructor(\n    name: string,\n    message: string,\n    messageType?: MessageType,\n    source?: string,\n    displayToUser: boolean = false\n  ) {\n    this.Name = name;\n    this.Message = message;\n    if (message) {\n      this.MessageType = messageType as MessageType;\n    }\n    if (source) {\n      this.Source = source as string;\n    }\n  }\n\n  /**\n   * Use this extension method to add the name of the message.\n   * @param name The name of the service message.\n   */\n  WithName(name: string) {\n    this.Name = name;\n    return this;\n  }\n\n  /**\n   * Use this extension method to add the message text to the ServiceMessage item.\n   * @param message The display text of the service message.\n   */\n  WithMessage(message: string) {\n    this.Message = message;\n    return this;\n  }\n\n  /**\n   * Use this extension method to set the [MessageType] of the ServiceMessage item.\n   * @param messageType: Use to indicate the message type.\n   */\n  WithMessageType(messageType: MessageType) {\n    this.MessageType = messageType;\n    return this;\n  }\n\n  /**\n   * Use this extension method to set the [Source] of the ServiceMessage item.\n   * @param source: Use to indicate the source of the message.\n   */\n  WithSource(source: string) {\n    this.Source = source;\n    return this;\n  }\n\n  /**\n   * Use this extension method to set the [DisplayToUser] indicator of the ServiceMessage.\n   * @param displayToUser: A boolean value to indicate if the message can be displayed to the user.\n   */\n  WithDisplayToUser(displayToUser: boolean) {\n    this.DisplayToUser = displayToUser;\n    return this;\n  }\n\n  /**\n   * Use this method return a string representing the ServiceMessage.\n   */\n  toString() {\n    return `Name: ${this.Name}; Message: ${\n      this.Message\n    }; MessageType: ${this.MessageType.toString()}; Source: ${\n      this.Source\n    }; DisplayToUser: ${this.DisplayToUser}`;\n  }\n}\n","import { IValidationContext } from './IValidationContext';\nimport { ValidationContextState } from './ValidationContextState';\nimport { RuleResult } from '../rules/RuleResult';\nimport { RulePolicy } from '../rules/RulePolicy';\n\n/**\n * Use this class to create a new Validation Context for your application. With this\n * context, you can add rules and evaluate the rules.\n *\n * After the rules are evaluated, you can use the Validation Context to determine if there are\n * any rule violations.\n */\nexport class ValidationContext implements IValidationContext {\n  /**\n   * Use to indicate the state of the validation context.\n   */\n  state: ValidationContextState = ValidationContextState.NotEvaluated;\n\n  /**\n   * A list of results for all evaluated rules that belong to the validation context.\n   */\n  results: Array<RuleResult> = new Array<RuleResult>();\n\n  /**\n   * A list of rules for rendering.\n   */\n  rules: Array<RulePolicy> = new Array<RulePolicy>();\n\n  /**\n   * The source of the specified validation context instance.\n   */\n  source: string;\n\n  /**\n   * The constructor for the base validation context.\n   */\n  constructor() {\n    console.log(\n      'The [ValidationContext] is ready for action(s). All things are good until broken...'\n    );\n  }\n\n  /**\n   * Use this method to add a new rule to the ValidationContext.\n   */\n  addRule(rule: RulePolicy) {\n    if (this.source) {\n      rule.source = this.source;\n    }\n    this.rules.push(rule);\n    return this;\n  }\n\n  /**\n   * Use this extension method to set the [Source] for the current validation context.\n   * @param source\n   */\n  withSource(source: string) {\n    this.source = source;\n    return this;\n  }\n\n  /**\n   * Use this method to execute the rules added to the [ValidationContext].\n   */\n  renderRules() {\n    this.results = new Array<RuleResult>();\n    if (this.rules && this.rules.length < 1) {\n      return this;\n    }\n    this.rules\n      .sort(r => r.priority)\n      .forEach(r => this.results.push(r.execute()));\n    return this;\n  }\n\n  /**\n   * Use to determine if the validation context has any rule violations.\n   */\n  hasRuleViolations(): boolean {\n    let hasViolations = false;\n    if (this.rules) {\n      const ruleViolationsCount =\n        this.rules && this.rules.filter(r => r.isValid === false).length;\n      if (ruleViolationsCount > 0) {\n        hasViolations = true;\n      }\n    }\n    return hasViolations;\n  }\n\n  /**\n   * *Use to indicate if the validation context is valid - no rule violations.\n   */\n  get isValid(): boolean {\n    let isRuleValid = true;\n    if (this.rules) {\n      const invalidRulesCount = this.rules.filter(r => r.isValid === false)\n        .length;\n      if (invalidRulesCount > 0) {\n        isRuleValid = false;\n      }\n    }\n    return isRuleValid;\n  }\n}\n"],"names":["NgModule","CommonModule","tslib_1.__extends","compare"],"mappings":"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"}
