{"version":3,"file":"angularlicious-logging.js.map","sources":["ng://@angularlicious/logging/lib/logging.module.ts","ng://@angularlicious/logging/lib/log-entry.ts","ng://@angularlicious/logging/lib/logging.service.ts","ng://@angularlicious/logging/lib/logging.service.config.ts","ng://@angularlicious/logging/lib/log-writers/log-writer.ts","ng://@angularlicious/logging/lib/log-writers/console-writer.ts","ng://@angularlicious/logging/lib/log-writers/loggly-writer.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxLogglyModule} from 'ngx-loggly-logger'\r\nimport { AngularliciousRulesEngineModule } from '@angularlicious/rules-engine';\r\n\r\n@NgModule({\r\n  imports: [CommonModule,\r\n    AngularliciousRulesEngineModule,\r\n    NgxLogglyModule.forRoot()],\r\n  providers: []\r\n})\r\nexport class AngularliciousLoggingModule {\r\n}\r\n","import { ILogEntry } from \"./i-log-entry\";\r\nimport { Severity } from \"./severity.enum\";\r\n\r\nexport class LogEntry implements ILogEntry {\r\n    application: string;\r\n    source: string;    \r\n    severity: Severity;\r\n    message: string;\r\n    timestamp: Date;\r\n    tags?: string[];\r\n\r\n    constructor(application: string, source: string, severity: Severity, message: string, tags?: string[] | null) {\r\n        this.application = application;\r\n        this.source = source;\r\n        this.severity = severity;\r\n        this.message = message;\r\n        this.timestamp = new Date(Date.now());\r\n        tags = tags;\r\n    }\r\n}","import { Injectable, Optional } from '@angular/core';\r\n\r\nimport { Severity } from './severity.enum';\r\nimport { ILoggingConfig, IConfiguration } from '@angularlicious/configuration';\r\nimport { ConfigurationService } from '@angularlicious/configuration';\r\nimport { LogEntry } from './log-entry';\r\nimport { Subject, ReplaySubject } from 'rxjs';\r\nimport { ILogEntry } from './i-log-entry';\r\n\r\n@Injectable()\r\nexport class AngularliciousLoggingService {\r\n  serviceName = 'LoggingService';\r\n  source: string;\r\n  severity: Severity;\r\n  message: string;\r\n  timestamp: Date;\r\n  applicationName: string = 'application';\r\n  version: string = '0.0.0';\r\n  isProduction: boolean;\r\n  loggingConfig: ILoggingConfig;\r\n\r\n  logEntries$: Subject<ILogEntry> = new ReplaySubject<ILogEntry>(1);\r\n\r\n  /**\r\n   * The [LoggingService] constructor.\r\n   */\r\n  constructor(\r\n    @Optional() public config: ConfigurationService\r\n  ) {\r\n    this.timestamp = new Date(Date.now());\r\n    this.log(this.serviceName, Severity.Information, `Starting logging service at: ${this.timestamp}`);\r\n\r\n    if(config) {\r\n      this.config.settings$.subscribe(\r\n        settings => this.setupConfiguration(settings)\r\n      );\r\n    }\r\n  }\r\n\r\n  setupConfiguration(settings: IConfiguration) {\r\n    if (this.config && this.config.settings && this.config.settings.logging) {\r\n      this.loggingConfig = this.config.settings.logging;\r\n      this.applicationName = (this.loggingConfig && this.loggingConfig.applicationName) ? this.loggingConfig.applicationName : 'application';\r\n      this.version = (this.loggingConfig && this.loggingConfig.version) ? this.loggingConfig.version : '0.0.0';\r\n      this.isProduction = (this.loggingConfig && this.loggingConfig.isProduction) ? this.loggingConfig.isProduction : false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use this method to send a log message with severity and source information\r\n   * to the application's logger.\r\n   *\r\n   * If the application environment mode is [Production], the information will\r\n   * be sent to a centralized repository.\r\n   *\r\n   * @param source\r\n   * @param severity\r\n   * @param message\r\n   */\r\n  log(source: string, severity: Severity, message: string, tags?: string[]) {\r\n    this.source = `${this.applicationName}.${source}`;\r\n    this.severity = severity;\r\n    this.message = message;\r\n    this.timestamp = new Date(Date.now());\r\n\r\n    const logEntry = new LogEntry(this.applicationName, this.source, this.severity, this.message, tags);\r\n    this.logEntries$.next(logEntry);\r\n  }\r\n}\r\n","export class LoggingServiceConfig {\r\n  public applicationName = 'APP_NAME_NOT_PROVIDED';\r\n  public version: string;\r\n}\r\n","import { ILogWriter } from \"./i-log-writer\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { ValidationContext, IsTrue, IsNotNullOrUndefined, StringIsNotNullEmptyRange } from \"@angularlicious/rules-engine\";\r\nimport { ILogEntry } from \"../i-log-entry\";\r\n\r\n// @Injectable()\r\n export abstract class LogWriter implements ILogWriter {\r\n    hasWriter: boolean;// = false;\r\n    targetEntry: ILogEntry;\r\n\r\n    /**\r\n     * Use this method to execute the write process for the\r\n     * specified [Log Entry] item.\r\n     */\r\n    execute(): void {\r\n        this.setup();\r\n        if (this.validateEntry()) {\r\n            this.write();\r\n        }\r\n        this.finish();\r\n    }\r\n\r\n    /**\r\n     * Use to perform an setup or configuration of the [writer]. \r\n     * The [setup] method runs on all executions of the writer - and\r\n     * is called before the [write] method.\r\n     */\r\n    public abstract setup(): void;\r\n\r\n    /**\r\n     * Use to validate the [log entry] before attempting to write\r\n     * using the specified [log writer]. \r\n     * \r\n     * Returns a [false] boolean to indicate the item is not valid.\r\n     */\r\n    public validateEntry(): boolean {\r\n        const validationContext = new ValidationContext();\r\n        validationContext.addRule(\r\n          new IsTrue(\r\n            'LogWriterExists',\r\n            'The log writer is not configured.',\r\n            this.hasWriter\r\n          )\r\n        );\r\n        validationContext.addRule(\r\n          new IsNotNullOrUndefined(\r\n            'EntryIsNotNull',\r\n            'The entry cannot be null.',\r\n            this.targetEntry\r\n          )\r\n        );\r\n        validationContext.addRule(\r\n          new StringIsNotNullEmptyRange(\r\n            'SourceIsRequired',\r\n            'The entry source is not valid.',\r\n            this.targetEntry.source,\r\n            1,\r\n            100\r\n          )\r\n        );\r\n        validationContext.addRule(\r\n          new StringIsNotNullEmptyRange('MessageIsValid', 'The message is required for the [Log Entry].', this.targetEntry.message, 1, 2000)\r\n        );\r\n        validationContext.addRule(\r\n          new IsNotNullOrUndefined(\r\n            'TimestampIsRequired',\r\n            'The timestamp must be a valid DateTime value.',\r\n            this.targetEntry.timestamp\r\n          )\r\n        );\r\n    \r\n        return validationContext.renderRules().isValid;\r\n      }\r\n\r\n    /**\r\n     * Use to implement the actual write of the [Log Entry].\r\n     */\r\n    public abstract write(): void;\r\n\r\n    /**\r\n     * Use to finish the process or clean-up any resources.\r\n     */\r\n    public finish(): void {\r\n\r\n    }\r\n}","import { LogWriter } from \"./log-writer\";\r\nimport { ILogEntry } from \"../i-log-entry\";\r\nimport { Severity } from \"../severity.enum\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { AngularliciousLoggingService } from \"./../logging.service\";\r\n\r\n/**\r\n * Use this writer to log information to the browser console.\r\n */\r\n@Injectable()\r\nexport class ConsoleWriter extends LogWriter {\r\n\r\n  constructor(\r\n    private loggingService: AngularliciousLoggingService\r\n  ) {\r\n    super();\r\n    console.log('hi');\r\n    this.loggingService.logEntries$.subscribe(\r\n      logEntry => this.handleLogEntry(logEntry)\r\n    );\r\n  }\r\n\r\n  handleLogEntry(logEntry: ILogEntry) {\r\n    this.targetEntry = logEntry;\r\n    this.execute();\r\n  }\r\n\r\n  /**\r\n   * No setup required for the console writer.\r\n   */\r\n  public setup(): void {\r\n  }\r\n\r\n  /**\r\n   * Implementation of the abstract method. This will perform the\r\n   * actual `write` action for the specified writer.\r\n   */\r\n  public write(): void {\r\n    switch (this.targetEntry.severity) {\r\n      case Severity.Debug:\r\n        console.debug(this.targetEntry);\r\n        break;\r\n      case Severity.Information:\r\n        console.info(this.targetEntry);\r\n        break;\r\n      case Severity.Warning:\r\n        console.warn(this.targetEntry);\r\n        break;\r\n      case Severity.Error:\r\n        console.error(this.targetEntry);\r\n        break;\r\n      case Severity.Critical:\r\n        console.error(this.targetEntry);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}","import { LogWriter } from './log-writer';\r\nimport { ILogEntry } from '../i-log-entry';\r\nimport { ConfigurationService } from '@angularlicious/configuration';\r\nimport { Optional } from '@angular/core';\r\nimport { LogglyService } from 'ngx-loggly-logger';\r\nimport { AngularliciousLoggingService } from '../logging.service';\r\nimport { IConfiguration, ILogglyConfig } from '@angularlicious/configuration';\r\n\r\nexport class LogglyWriter extends LogWriter {\r\n\r\n  logglyConfig: ILogglyConfig;\r\n\r\n  constructor(\r\n    @Optional() private configService: ConfigurationService,\r\n    private loggingService: AngularliciousLoggingService,\r\n    private loggly: LogglyService\r\n  ) {\r\n    super();\r\n    if (\r\n      this.configService && this.loggingService\r\n    ) {\r\n      this.configService.settings$.subscribe( settings => this.handleSettings(settings));\r\n      this.loggingService.logEntries$.subscribe(entry => this.handleLogEntry(entry));\r\n    }\r\n  }\r\n\r\n  handleSettings(settings: IConfiguration) {\r\n    if(settings) {\r\n      this.hasWriter = true;\r\n      this.logglyConfig = settings.loggly;\r\n    }\r\n  }\r\n\r\n  handleLogEntry(entry: ILogEntry) {\r\n    if(this.hasWriter) {\r\n      this.targetEntry = entry;\r\n      this.execute();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method is part of the [execute] pipeline. Do not call\r\n   * this method outside of the context of the execution pipeline.\r\n   *  \r\n   * Use to setup the [Loggly] writer with an [apiKey] from the\r\n   * configuration service. \r\n   * \r\n   * It will use the configuration service to configure and initialize \r\n   * and setup a new call to log the information to the writer. \r\n   */\r\n  public setup(): void {\r\n    if (this.hasWriter) {\r\n      this.loggly.push({\r\n        logglyKey: this.logglyConfig.apiKey,\r\n        sendConsoleErrors: this.logglyConfig.sendConsoleErrors\r\n      });\r\n\r\n      if (this.targetEntry.tags && this.targetEntry.tags.length > 0) {\r\n        const tags = this.targetEntry.tags.join(',');\r\n        this.loggly.push({ tag: tags });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method is part of the [execute] pipeline - it will be called if the \r\n   * current [Log Entry] item is valid and the writer is initialized and ready.\r\n   */\r\n  public write(): void {\r\n    this.loggly.push(this.formatEntry(this.targetEntry));\r\n  }\r\n\r\n  /**\r\n   * Use this function to format a specified [Log Entry] item. This should be moved\r\n   * to a specific [formatter] service that can be injected into the specified \r\n   * writer. \r\n   * @param logEntry \r\n   */\r\n  formatEntry(logEntry: ILogEntry): string {\r\n    return `application:${logEntry.application}; source:${\r\n      logEntry.source\r\n    }; timestamp:${logEntry.timestamp.toUTCString()}; message:${\r\n      logEntry.message\r\n    }`;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}
