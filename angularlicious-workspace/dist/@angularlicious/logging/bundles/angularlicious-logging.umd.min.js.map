{"version":3,"sources":["ng://@angularlicious/logging/lib/logging.module.ts","ng://@angularlicious/logging/lib/log-entry.ts","ng://@angularlicious/logging/lib/logging.service.ts","ng://@angularlicious/logging/lib/logging.service.config.ts","ng://@angularlicious/logging/lib/log-writers/log-writer.ts","null","ng://@angularlicious/logging/lib/log-writers/console-writer.ts","ng://@angularlicious/logging/lib/log-writers/loggly-writer.ts"],"names":["AngularliciousLoggingModule","NgModule","args","imports","CommonModule","AngularliciousRulesEngineModule","NgxLogglyModule","forRoot","providers","LogEntry","application","source","severity","message","tags","this","timestamp","Date","now","AngularliciousLoggingService","config","_this","ReplaySubject","log","serviceName","Severity","Information","settings$","subscribe","settings","setupConfiguration","prototype","logging","loggingConfig","applicationName","version","isProduction","logEntry","logEntries$","next","Injectable","ConfigurationService","decorators","type","Optional","LoggingServiceConfig","LogWriter","execute","setup","validateEntry","write","finish","validationContext","ValidationContext","addRule","IsTrue","hasWriter","IsNotNullOrUndefined","targetEntry","StringIsNotNullEmptyRange","renderRules","isValid","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","ConsoleWriter","loggingService","_super","call","console","handleLogEntry","tslib_1.__extends","Debug","debug","info","Warning","warn","Error","Critical","error","LogglyWriter","configService","loggly","handleSettings","entry","logglyConfig","push","logglyKey","apiKey","sendConsoleErrors","length","join","tag","formatEntry","toUTCString","LogglyService"],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxLogglyModule} from 'ngx-loggly-logger'\r\nimport { AngularliciousRulesEngineModule } from '@angularlicious/rules-engine';\r\n\r\n@NgModule({\r\n  imports: [CommonModule,\r\n    AngularliciousRulesEngineModule,\r\n    NgxLogglyModule.forRoot()],\r\n  providers: []\r\n})\r\nexport class AngularliciousLoggingModule {\r\n}\r\n","import { ILogEntry } from \"./i-log-entry\";\r\nimport { Severity } from \"./severity.enum\";\r\n\r\nexport class LogEntry implements ILogEntry {\r\n    application: string;\r\n    source: string;    \r\n    severity: Severity;\r\n    message: string;\r\n    timestamp: Date;\r\n    tags?: string[];\r\n\r\n    constructor(application: string, source: string, severity: Severity, message: string, tags?: string[] | null) {\r\n        this.application = application;\r\n        this.source = source;\r\n        this.severity = severity;\r\n        this.message = message;\r\n        this.timestamp = new Date(Date.now());\r\n        tags = tags;\r\n    }\r\n}","import { Injectable, Optional } from '@angular/core';\r\n\r\nimport { Severity } from './severity.enum';\r\nimport { ILoggingConfig, IConfiguration } from '@angularlicious/configuration';\r\nimport { ConfigurationService } from '@angularlicious/configuration';\r\nimport { LogEntry } from './log-entry';\r\nimport { Subject, ReplaySubject } from 'rxjs';\r\nimport { ILogEntry } from './i-log-entry';\r\n\r\n@Injectable()\r\nexport class AngularliciousLoggingService {\r\n  serviceName = 'LoggingService';\r\n  source: string;\r\n  severity: Severity;\r\n  message: string;\r\n  timestamp: Date;\r\n  applicationName: string = 'application';\r\n  version: string = '0.0.0';\r\n  isProduction: boolean;\r\n  loggingConfig: ILoggingConfig;\r\n\r\n  logEntries$: Subject<ILogEntry> = new ReplaySubject<ILogEntry>(1);\r\n\r\n  /**\r\n   * The [LoggingService] constructor.\r\n   */\r\n  constructor(\r\n    @Optional() public config: ConfigurationService\r\n  ) {\r\n    this.timestamp = new Date(Date.now());\r\n    this.log(this.serviceName, Severity.Information, `Starting logging service at: ${this.timestamp}`);\r\n\r\n    if(config) {\r\n      this.config.settings$.subscribe(\r\n        settings => this.setupConfiguration(settings)\r\n      );\r\n    }\r\n  }\r\n\r\n  setupConfiguration(settings: IConfiguration) {\r\n    if (this.config && this.config.settings && this.config.settings.logging) {\r\n      this.loggingConfig = this.config.settings.logging;\r\n      this.applicationName = (this.loggingConfig && this.loggingConfig.applicationName) ? this.loggingConfig.applicationName : 'application';\r\n      this.version = (this.loggingConfig && this.loggingConfig.version) ? this.loggingConfig.version : '0.0.0';\r\n      this.isProduction = (this.loggingConfig && this.loggingConfig.isProduction) ? this.loggingConfig.isProduction : false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use this method to send a log message with severity and source information\r\n   * to the application's logger.\r\n   *\r\n   * If the application environment mode is [Production], the information will\r\n   * be sent to a centralized repository.\r\n   *\r\n   * @param source\r\n   * @param severity\r\n   * @param message\r\n   */\r\n  log(source: string, severity: Severity, message: string, tags?: string[]) {\r\n    this.source = `${this.applicationName}.${source}`;\r\n    this.severity = severity;\r\n    this.message = message;\r\n    this.timestamp = new Date(Date.now());\r\n\r\n    const logEntry = new LogEntry(this.applicationName, this.source, this.severity, this.message, tags);\r\n    this.logEntries$.next(logEntry);\r\n  }\r\n}\r\n","export class LoggingServiceConfig {\r\n  public applicationName = 'APP_NAME_NOT_PROVIDED';\r\n  public version: string;\r\n}\r\n","import { ILogWriter } from \"./i-log-writer\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { ValidationContext, IsTrue, IsNotNullOrUndefined, StringIsNotNullEmptyRange } from \"@angularlicious/rules-engine\";\r\nimport { ILogEntry } from \"../i-log-entry\";\r\n\r\n// @Injectable()\r\n export abstract class LogWriter implements ILogWriter {\r\n    hasWriter: boolean;// = false;\r\n    targetEntry: ILogEntry;\r\n\r\n    /**\r\n     * Use this method to execute the write process for the\r\n     * specified [Log Entry] item.\r\n     */\r\n    execute(): void {\r\n        this.setup();\r\n        if (this.validateEntry()) {\r\n            this.write();\r\n        }\r\n        this.finish();\r\n    }\r\n\r\n    /**\r\n     * Use to perform an setup or configuration of the [writer]. \r\n     * The [setup] method runs on all executions of the writer - and\r\n     * is called before the [write] method.\r\n     */\r\n    public abstract setup(): void;\r\n\r\n    /**\r\n     * Use to validate the [log entry] before attempting to write\r\n     * using the specified [log writer]. \r\n     * \r\n     * Returns a [false] boolean to indicate the item is not valid.\r\n     */\r\n    public validateEntry(): boolean {\r\n        const validationContext = new ValidationContext();\r\n        validationContext.addRule(\r\n          new IsTrue(\r\n            'LogWriterExists',\r\n            'The log writer is not configured.',\r\n            this.hasWriter\r\n          )\r\n        );\r\n        validationContext.addRule(\r\n          new IsNotNullOrUndefined(\r\n            'EntryIsNotNull',\r\n            'The entry cannot be null.',\r\n            this.targetEntry\r\n          )\r\n        );\r\n        validationContext.addRule(\r\n          new StringIsNotNullEmptyRange(\r\n            'SourceIsRequired',\r\n            'The entry source is not valid.',\r\n            this.targetEntry.source,\r\n            1,\r\n            100\r\n          )\r\n        );\r\n        validationContext.addRule(\r\n          new StringIsNotNullEmptyRange('MessageIsValid', 'The message is required for the [Log Entry].', this.targetEntry.message, 1, 2000)\r\n        );\r\n        validationContext.addRule(\r\n          new IsNotNullOrUndefined(\r\n            'TimestampIsRequired',\r\n            'The timestamp must be a valid DateTime value.',\r\n            this.targetEntry.timestamp\r\n          )\r\n        );\r\n    \r\n        return validationContext.renderRules().isValid;\r\n      }\r\n\r\n    /**\r\n     * Use to implement the actual write of the [Log Entry].\r\n     */\r\n    public abstract write(): void;\r\n\r\n    /**\r\n     * Use to finish the process or clean-up any resources.\r\n     */\r\n    public finish(): void {\r\n\r\n    }\r\n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { LogWriter } from \"./log-writer\";\r\nimport { ILogEntry } from \"../i-log-entry\";\r\nimport { Severity } from \"../severity.enum\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { AngularliciousLoggingService } from \"./../logging.service\";\r\n\r\n/**\r\n * Use this writer to log information to the browser console.\r\n */\r\n@Injectable()\r\nexport class ConsoleWriter extends LogWriter {\r\n\r\n  constructor(\r\n    private loggingService: AngularliciousLoggingService\r\n  ) {\r\n    super();\r\n    console.log('hi');\r\n    this.loggingService.logEntries$.subscribe(\r\n      logEntry => this.handleLogEntry(logEntry)\r\n    );\r\n  }\r\n\r\n  handleLogEntry(logEntry: ILogEntry) {\r\n    this.targetEntry = logEntry;\r\n    this.execute();\r\n  }\r\n\r\n  /**\r\n   * No setup required for the console writer.\r\n   */\r\n  public setup(): void {\r\n  }\r\n\r\n  /**\r\n   * Implementation of the abstract method. This will perform the\r\n   * actual `write` action for the specified writer.\r\n   */\r\n  public write(): void {\r\n    switch (this.targetEntry.severity) {\r\n      case Severity.Debug:\r\n        console.debug(this.targetEntry);\r\n        break;\r\n      case Severity.Information:\r\n        console.info(this.targetEntry);\r\n        break;\r\n      case Severity.Warning:\r\n        console.warn(this.targetEntry);\r\n        break;\r\n      case Severity.Error:\r\n        console.error(this.targetEntry);\r\n        break;\r\n      case Severity.Critical:\r\n        console.error(this.targetEntry);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}","import { LogWriter } from './log-writer';\r\nimport { ILogEntry } from '../i-log-entry';\r\nimport { ConfigurationService } from '@angularlicious/configuration';\r\nimport { Optional } from '@angular/core';\r\nimport { LogglyService } from 'ngx-loggly-logger';\r\nimport { AngularliciousLoggingService } from '../logging.service';\r\nimport { IConfiguration, ILogglyConfig } from '@angularlicious/configuration';\r\n\r\nexport class LogglyWriter extends LogWriter {\r\n\r\n  logglyConfig: ILogglyConfig;\r\n\r\n  constructor(\r\n    @Optional() private configService: ConfigurationService,\r\n    private loggingService: AngularliciousLoggingService,\r\n    private loggly: LogglyService\r\n  ) {\r\n    super();\r\n    if (\r\n      this.configService && this.loggingService\r\n    ) {\r\n      this.configService.settings$.subscribe( settings => this.handleSettings(settings));\r\n      this.loggingService.logEntries$.subscribe(entry => this.handleLogEntry(entry));\r\n    }\r\n  }\r\n\r\n  handleSettings(settings: IConfiguration) {\r\n    if(settings) {\r\n      this.hasWriter = true;\r\n      this.logglyConfig = settings.loggly;\r\n    }\r\n  }\r\n\r\n  handleLogEntry(entry: ILogEntry) {\r\n    if(this.hasWriter) {\r\n      this.targetEntry = entry;\r\n      this.execute();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method is part of the [execute] pipeline. Do not call\r\n   * this method outside of the context of the execution pipeline.\r\n   *  \r\n   * Use to setup the [Loggly] writer with an [apiKey] from the\r\n   * configuration service. \r\n   * \r\n   * It will use the configuration service to configure and initialize \r\n   * and setup a new call to log the information to the writer. \r\n   */\r\n  public setup(): void {\r\n    if (this.hasWriter) {\r\n      this.loggly.push({\r\n        logglyKey: this.logglyConfig.apiKey,\r\n        sendConsoleErrors: this.logglyConfig.sendConsoleErrors\r\n      });\r\n\r\n      if (this.targetEntry.tags && this.targetEntry.tags.length > 0) {\r\n        const tags = this.targetEntry.tags.join(',');\r\n        this.loggly.push({ tag: tags });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method is part of the [execute] pipeline - it will be called if the \r\n   * current [Log Entry] item is valid and the writer is initialized and ready.\r\n   */\r\n  public write(): void {\r\n    this.loggly.push(this.formatEntry(this.targetEntry));\r\n  }\r\n\r\n  /**\r\n   * Use this function to format a specified [Log Entry] item. This should be moved\r\n   * to a specific [formatter] service that can be injected into the specified \r\n   * writer. \r\n   * @param logEntry \r\n   */\r\n  formatEntry(logEntry: ILogEntry): string {\r\n    return `application:${logEntry.application}; source:${\r\n      logEntry.source\r\n    }; timestamp:${logEntry.timestamp.toUTCString()}; message:${\r\n      logEntry.message\r\n    }`;\r\n  }\r\n}\r\n"]}