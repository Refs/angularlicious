{"version":3,"sources":["ng://@angularlicious/foundation/lib/foundation.module.ts","node_modules/tslib/tslib.es6.js","ng://@angularlicious/foundation/lib/models/service-response.model.ts","ng://@angularlicious/foundation/lib/models/error-response.model.ts","ng://@angularlicious/foundation/lib/service-base.ts","ng://@angularlicious/foundation/lib/action-base.action.ts","ng://@angularlicious/foundation/lib/business-provider-base.service.ts","ng://@angularlicious/foundation/lib/models/alert-types.constants.ts","ng://@angularlicious/foundation/lib/models/alert-notification.model.ts","ng://@angularlicious/foundation/lib/component-base.component.ts","ng://@angularlicious/foundation/lib/models/http-request-options.ts","ng://@angularlicious/foundation/lib/models/http-request-methods.enum.ts","ng://@angularlicious/foundation/lib/http-base.service.ts","ng://@angularlicious/foundation/lib/models/service-error.model.ts"],"names":["AngularliciousFoundationModule","NgModule","args","imports","AngularliciousLoggingModule","CommonModule","AngularliciousRulesEngineModule","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ServiceResponse","Errors","ErrorResponse","_this","_super","call","IsSuccess","tslib_1.__extends","ServiceBase","loggingService","accessToken","serviceContext","ServiceContext","extractData","response","json","handleUnexpectedError","error","message","ServiceMessage","name","WithDisplayToUser","WithMessageType","MessageType","Error","WithSource","serviceName","tags","logItem","toString","stack","log","Severity","addMessage","handleError","handleHttpError","requestOptions","requestUrl","JSON","stringify","body","_body","errorResponse","BehaviorSubject","asObservable","createErrorResponse","handleOAuthError","e","Message","finishRequest","sourceName","Information","hasErrors","Messages","filter","f","DisplayToUser","forEach","resetServiceContext","length","Warning","writeMessages","ActionBase","validateAction","validationContext","renderRules","postValidateAction","actionName","hasRuleViolations","results","result","isValid","publishRuleResult","retrieveRuleDetails","postExecuteAction","actionResult","ActionResult","Fail","validateActionResult","Observable","throw","isGood","Success","ruleResult","rulePolicy","CompositeRule","composite","isDisplayable","errorResult","serviceMessage","Source","push","Action","BusinessProviderBase","AlertTypes","Danger","AlertNotification","header","title","messages","type","showAlert","ComponentBase","componentName","router","alertNotification","events","subscribe","event","NavigationEnd","googleAnalyticsPageview","googleAnalyticsSendEvent","category","action","label","value","gtag","event_category","event_label","urlAfterRedirects","ga","page_title","page_path","handleServiceErrors","retrieveServiceContextErrorMessages","errors","retrieveResponseErrorMessages","resetAlertNotifications","routeTo","routeName","navigate","showResponseErrors","undefined","showAlertMessage","alert","HttpRequestOptions","get","post","put","delete","options","head","patch","HttpBaseService","http","createMultipartFormDataHeader","requiresAuthToken","headers","HttpHeaders","append","createFormUrlencodedHeader","Content-Type","createHeader","createRequestOptions","method","url","executeRequest","request","requestMethod","HttpRequestMethod","pipe","ex","err","errorMessage","Exception","Injectable","HttpClient","AngularliciousLoggingService","ServiceError"],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AngularliciousLoggingModule } from '@angularlicious/logging';\r\nimport { AngularliciousRulesEngineModule } from '@angularlicious/rules-engine';\r\n\r\n@NgModule({\r\n  imports: [AngularliciousLoggingModule, CommonModule, AngularliciousRulesEngineModule],\r\n})\r\nexport class AngularliciousFoundationModule {}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { ServiceError } from './service-error.model';\r\n\r\nexport class ServiceResponse {\r\n  IsSuccess: boolean;\r\n  Message: string;\r\n  Data: any;\r\n  Errors: Array<ServiceError> = new Array<ServiceError>();\r\n}\r\n","import { ServiceError } from './service-error.model';\r\nimport { ServiceResponse } from './service-response.model';\r\n\r\nexport class ErrorResponse extends ServiceResponse {\r\n  Exception: Error;\r\n\r\n  constructor() {\r\n    super();\r\n    this.IsSuccess = false;\r\n  }\r\n}\r\n","import {\r\n  ServiceContext,\r\n  MessageType,\r\n  ServiceMessage\r\n} from '@angularlicious/rules-engine';\r\nimport {\r\n  AngularliciousLoggingService,\r\n  Severity\r\n} from '@angularlicious/logging';\r\nimport { ErrorResponse } from './models/error-response.model';\r\nimport { OAuthErrorResponse } from './models/oauth-error-response.model';\r\nimport { BehaviorSubject } from 'rxjs';\r\n// import { RequestOptions, Response } from '@angular/http';\r\n// import { Observable } from 'rxjs';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpRequestOptions } from './models/http-request-options';\r\n\r\n/**\r\n * Use the [ServiceBase] to provide common behavior for Angular\r\n * services.\r\n */\r\nexport class ServiceBase {\r\n  accessToken = '';\r\n  serviceName: string;\r\n  serviceContext: ServiceContext = new ServiceContext();\r\n\r\n  /**\r\n   * Use the constructor to provide required elements to the base class.\r\n   *\r\n   * @param loggingService The [LoggingService] is a required dependency of this\r\n   * class. It should be injected into any Angular Services that extend from\r\n   * this base class. It will allow the members of the base class to log information\r\n   * using the common LoggingService.\r\n   */\r\n  constructor(public loggingService: AngularliciousLoggingService) { }\r\n\r\n  /**\r\n   * Use to extract the contents of the HTTP body and return a JSON\r\n   * representation of the data.\r\n   * @param response: contains the HTTP response.\r\n   */\r\n  extractData(response: Response) {\r\n    const body = response.json();\r\n    return body || {};\r\n  }\r\n\r\n  /**\r\n   * Use to handle an unexpected error in the application. The error should implement\r\n   * the specified interface. The method will add a new [ServiceMessage] to the\r\n   * specified [ServiceContext].\r\n   * @param error An unexpected application error that implements the [Error] interface.\r\n   *\r\n   * interface Error {\r\n   *  name: string;\r\n   *  message: string;\r\n   *  stack?: string;\r\n   * }\r\n   */\r\n  handleUnexpectedError(error: Error): void {\r\n    const message = new ServiceMessage(error.name, error.message)\r\n      .WithDisplayToUser(true)\r\n      .WithMessageType(MessageType.Error)\r\n      .WithSource(this.serviceName);\r\n\r\n    const tags: string[] = [`${this.serviceName}`]\r\n    const logItem = `${message.toString()}; ${error.stack}`;\r\n    this.loggingService.log(this.serviceName, Severity.Error, logItem, tags);\r\n\r\n    this.serviceContext.addMessage(message);\r\n  }\r\n\r\n  /**\r\n   * Use to handle an error that contains a [name] and a [message].\r\n   * @param error\r\n   */\r\n  handleError(error: { name: string; message: string | undefined }): void {\r\n    const message = new ServiceMessage(error.name, error.message)\r\n      .WithDisplayToUser(true)\r\n      .WithMessageType(MessageType.Error)\r\n      .WithSource(this.serviceName);\r\n\r\n    const tags: string[] = [`${this.serviceName}`]\r\n\r\n    this.loggingService.log(\r\n      this.serviceName,\r\n      Severity.Error,\r\n      message.toString(),\r\n      tags\r\n    );\r\n\r\n    this.serviceContext.addMessage(message);\r\n  }\r\n\r\n  /**\r\n   * Use to handle HTTP errors when calling web api(s).\r\n   */\r\n  handleHttpError(\r\n    error: { toString: () => void; _body: any; json: () => ErrorResponse },\r\n    requestOptions: HttpRequestOptions\r\n  ): Observable<Response> {\r\n    const message = `${error.toString()} ${\r\n      requestOptions.requestUrl\r\n      }, ${JSON.stringify(requestOptions.body)}`;\r\n    this.loggingService.log(this.serviceName, Severity.Error, message);\r\n    if (error && error._body) {\r\n      try {\r\n        const errorResponse: ErrorResponse = error.json();\r\n        const behaviorSubject: BehaviorSubject<any> = new BehaviorSubject(\r\n          errorResponse\r\n        );\r\n        return behaviorSubject.asObservable();\r\n      } catch (error) {\r\n        this.loggingService.log(\r\n          this.serviceName,\r\n          Severity.Error,\r\n          error.toString()\r\n        );\r\n      }\r\n    }\r\n\r\n    // default return behavior;\r\n    const response = this.createErrorResponse(\r\n      'Unexpected error while processing response.'\r\n    );\r\n    const subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n    return subject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Use this method to handle an error from the OAuth Provider API.\r\n   * @param error\r\n   * @param requestOptions\r\n   */\r\n  handleOAuthError(\r\n    error: OAuthErrorResponse,\r\n    requestOptions: HttpRequestOptions\r\n  ): Observable<Response> {\r\n    const message = `${error.toString()} ${\r\n      requestOptions.requestUrl\r\n      }, ${JSON.stringify(requestOptions.body)}`;\r\n    this.loggingService.log(this.serviceName, Severity.Error, message);\r\n    if (error && error._body) {\r\n      try {\r\n        const errorResponse = this.createErrorResponse(\r\n          `Unable to validate credentials.`\r\n        );\r\n        const behaviorSubject: BehaviorSubject<any> = new BehaviorSubject(\r\n          errorResponse\r\n        );\r\n        return behaviorSubject.asObservable();\r\n      } catch (e) {\r\n        this.loggingService.log(this.serviceName, Severity.Error, e.toString());\r\n      }\r\n    }\r\n\r\n    // default return behavior;\r\n    const response = this.createErrorResponse(\r\n      `Unable to validate credentials.`\r\n    );\r\n    const subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n    return subject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Use to create a new [ErrorResponse] with the specified message.\r\n   * @param message The message for the specified [ErrorResponse].\r\n   */\r\n  createErrorResponse(message: string): ErrorResponse {\r\n    const response: ErrorResponse = new ErrorResponse();\r\n    response.Message = message;\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Use a generic method to finish service requests that return [Observables].\r\n   * @param sourceName\r\n   */\r\n  finishRequest(sourceName: string): void {\r\n    this.loggingService.log(\r\n      this.serviceName,\r\n      Severity.Information,\r\n      `Request for [${sourceName}] by ${this.serviceName} is complete.`\r\n    );\r\n    if (this.serviceContext.hasErrors()) {\r\n      this.loggingService.log(\r\n        this.serviceName,\r\n        Severity.Information,\r\n        `Preparing to write any messages.`\r\n      );\r\n      this.serviceContext.Messages.filter(\r\n        f => f.MessageType === MessageType.Error && f.DisplayToUser\r\n      ).forEach(e =>\r\n        this.loggingService.log(this.serviceName, Severity.Error, e.toString())\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use to reset the service context when you want to clear messages from the [ServiceContext]. If you want to\r\n   * append messages from subsequent service calls, do not use this method.\r\n   */\r\n  resetServiceContext() {\r\n    this.loggingService.log(\r\n      this.serviceName,\r\n      Severity.Information,\r\n      `Preparing to reset the Messages of the current [ServiceContext].`\r\n    );\r\n    if (this.serviceContext && this.serviceContext.Messages) {\r\n      if (this.serviceContext.Messages.length > 0) {\r\n        this.loggingService.log(\r\n          this.serviceName,\r\n          Severity.Information,\r\n          `Resetting the Messages of the current [ServiceContext].`\r\n        );\r\n        this.serviceContext.Messages = new Array<ServiceMessage>();\r\n      } else {\r\n        this.loggingService.log(\r\n          this.serviceName,\r\n          Severity.Information,\r\n          `The current [ServiceContext] does not contain any [Messages].`\r\n        );\r\n      }\r\n    } else {\r\n      this.loggingService.log(\r\n        this.serviceName,\r\n        Severity.Warning,\r\n        `The current [ServiceContext] is not valid.`\r\n      );\r\n    }\r\n    this.loggingService.log(\r\n      this.serviceName,\r\n      Severity.Information,\r\n      `Finished  processing request to [reset] the Messages of the current [ServiceContext].`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Use to write the current messages contained in the [ServiceContext]. Written messages are limited\r\n   * to items that are marked as [DisplayToUser = true].\r\n   */\r\n  writeMessages() {\r\n    if (this.serviceContext && this.serviceContext.Messages) {\r\n      this.serviceContext.Messages.forEach(e => {\r\n        if (e.MessageType === MessageType.Error && e.DisplayToUser) {\r\n          this.loggingService.log(\r\n            this.serviceName,\r\n            Severity.Error,\r\n            e.toString()\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n// // import { Response } from '@angular/http';\r\n\r\nimport { Action } from '@angularlicious/actions';\r\nimport { ValidationContext } from '@angularlicious/rules-engine';\r\nimport { ServiceMessage } from '@angularlicious/rules-engine';\r\nimport { MessageType } from '@angularlicious/rules-engine';\r\nimport { ServiceContext } from '@angularlicious/rules-engine';\r\nimport { ActionResult } from '@angularlicious/actions';\r\nimport { CompositeRule } from '@angularlicious/rules-engine';\r\nimport { RuleResult } from '@angularlicious/rules-engine';\r\n\r\nimport { AngularliciousLoggingService } from '@angularlicious/logging';\r\nimport { Severity } from '@angularlicious/logging';\r\nimport { HttpBaseService } from './http-base.service';\r\nimport { ErrorResponse } from './models/error-response.model';\r\nimport { ServiceError } from './models/service-error.model';\r\n\r\n/**\r\n * This is the application's base Action class that provides implementation of pipeline methods - pre/post\r\n * execution methods.\r\n *\r\n * The pre-execute methods that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t1. processAction();\r\n *\r\n * The post-execution methods that can be implemented are:\r\n *\t\t1. postExecuteAction();\r\n *\t\t2. validateActionResult();\r\n *\t\t3. finish();\r\n */\r\n\r\nexport class ActionBase extends Action {\r\n  serviceContext: ServiceContext;\r\n  response: Observable<any>;\r\n  httpBase: HttpBaseService;\r\n  loggingService: AngularliciousLoggingService;\r\n  actionName: string;\r\n\r\n  /**\r\n   * This is a required implementation if you want to render/execute the rules that\r\n   * are associated to the specified action.\r\n   */\r\n  validateAction(): ValidationContext {\r\n    return this.validationContext.renderRules();\r\n  }\r\n\r\n  postValidateAction() {\r\n    this.loggingService.log(\r\n      this.actionName,\r\n      Severity.Information,\r\n      `Preparing to determine if the action contains validation errors in ${\r\n        this.actionName\r\n      }`\r\n    );\r\n\r\n    if (this.validationContext.hasRuleViolations()) {\r\n      this.loggingService.log(\r\n        this.actionName,\r\n        Severity.Information,\r\n        `The target contains validation errors in ${this.actionName}`\r\n      );\r\n\r\n      // Load the error/rule violations into the ServiceContext so that the information bubbles up to the caller of the service;\r\n      this.validationContext.results.forEach(result => {\r\n        if (!result.isValid) {\r\n          this.publishRuleResult(result);\r\n          this.retrieveRuleDetails(result);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  postExecuteAction() {\r\n    if (this.actionResult === ActionResult.Fail) {\r\n      this.serviceContext.Messages.forEach(e => {\r\n        if (e.MessageType === MessageType.Error) {\r\n          this.loggingService.log(\r\n            this.actionName,\r\n            Severity.Error,\r\n            e.toString()\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * All concrete actions must override and implement this method. It is defined in the [Action] framework class.\r\n   */\r\n  validateActionResult(): ActionResult {\r\n    this.loggingService.log(\r\n      this.actionName,\r\n      Severity.Information,\r\n      `Running [validateActionResult] for ${this.actionName}.`\r\n    );\r\n    // determine the status of the action based on any rule violations;\r\n    if (this.validationContext.hasRuleViolations()) {\r\n      this.loggingService.log(\r\n        this.actionName,\r\n        Severity.Error,\r\n        `The ${this.actionName} contains rule violations.`\r\n      );\r\n      this.actionResult = ActionResult.Fail;\r\n\r\n      const errorResponse = new ErrorResponse();\r\n      errorResponse.IsSuccess = false;\r\n      errorResponse.Message = `Validation errors exist.`;\r\n      this.response = Observable.throw(errorResponse);\r\n    }\r\n    this.actionResult = this.serviceContext.isGood()\r\n      ? ActionResult.Success\r\n      : ActionResult.Fail;\r\n    return this.actionResult;\r\n  }\r\n\r\n  /**\r\n   * Use to process rule results for composite rules. Note, that this function is recursive\r\n   * and will process all composite rules in the rule set contained in the ValidationContext.\r\n   * @param ruleResult The result of a rendered rule.\r\n   */\r\n  retrieveRuleDetails(ruleResult: RuleResult) {\r\n    if (ruleResult.rulePolicy instanceof CompositeRule) {\r\n      const composite = ruleResult.rulePolicy as CompositeRule;\r\n      if (composite && composite.hasErrors) {\r\n        const errors = composite.results.filter(\r\n          result => !result.isValid && result.rulePolicy.isDisplayable\r\n        );\r\n\r\n        errors.forEach(errorResult => {\r\n          this.publishRuleResult(errorResult);\r\n\r\n          if (errorResult.rulePolicy instanceof CompositeRule) {\r\n            this.retrieveRuleDetails(errorResult);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A helper function to publish a new [ServiceMessage] to the [ServiceContext.Messages] list.\r\n   * @param ruleResult\r\n   */\r\n  publishRuleResult(ruleResult: RuleResult) {\r\n    const serviceMessage = new ServiceMessage(\r\n      ruleResult.rulePolicy.name,\r\n      ruleResult.rulePolicy.message,\r\n      MessageType.Error\r\n    );\r\n    serviceMessage.DisplayToUser = ruleResult.rulePolicy.isDisplayable;\r\n    serviceMessage.Source = this.actionName;\r\n    this.serviceContext.Messages.push(serviceMessage);\r\n    this.loggingService.log(\r\n      this.actionName,\r\n      Severity.Error,\r\n      `${serviceMessage.toString()}`\r\n    );\r\n  }\r\n}\r\n","import { AngularliciousLoggingService } from '@angularlicious/logging';\r\n\r\nimport { ServiceContext } from '@angularlicious/rules-engine';\r\nimport { ServiceMessage } from '@angularlicious/rules-engine';\r\nimport { MessageType } from '@angularlicious/rules-engine';\r\nimport { Severity } from '@angularlicious/logging';\r\n\r\n/**\r\n * Use the business provider base class to access common elements of the business provider.\r\n *\r\n * serviceContext: This is initialized for each instance of a business provider - its purpose is to collect information during the processing of business logic.\r\n */\r\nexport class BusinessProviderBase {\r\n  serviceName: string;\r\n  serviceContext: ServiceContext;\r\n  accessToken: string;\r\n\r\n  constructor(public loggingService: AngularliciousLoggingService) {\r\n    this.loggingService.log(\r\n      this.serviceName,\r\n      Severity.Information,\r\n      `Running constructor for the [BusinessProviderBase].`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Use to handle an unexpected error in the application. The error should implement\r\n   * the specified interface. The method will add a new [ServiceMessage] to the\r\n   * specified [ServiceContext].\r\n   * @param error An unexpected application error that implements the [Error] interface.\r\n   *\r\n   * interface Error {\r\n   *  name: string;\r\n   *  message: string;\r\n   *  stack?: string;\r\n   * }\r\n   */\r\n  handleUnexpectedError(error: Error): void {\r\n    const message = new ServiceMessage(error.name, error.message)\r\n      .WithDisplayToUser(true)\r\n      .WithMessageType(MessageType.Error)\r\n      .WithSource(this.serviceName);\r\n\r\n    const logItem = `${message.toString()}; ${error.stack}`;\r\n    this.loggingService.log(this.serviceName, Severity.Error, logItem);\r\n\r\n    this.serviceContext.addMessage(message);\r\n  }\r\n\r\n  finishRequest(sourceName: string): void {\r\n    this.loggingService.log(\r\n      this.serviceName,\r\n      Severity.Information,\r\n      `Request for [${sourceName}] by ${this.serviceName} is complete.`\r\n    );\r\n    if (this.serviceContext.hasErrors()) {\r\n      this.loggingService.log(\r\n        this.serviceName,\r\n        Severity.Information,\r\n        `Preparing to write out the errors.`\r\n      );\r\n      this.serviceContext.Messages.filter(\r\n        f => f.DisplayToUser && f.MessageType === MessageType.Error\r\n      ).forEach(e =>\r\n        this.loggingService.log(this.serviceName, Severity.Error, e.toString())\r\n      );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Use to provide the alert type information for the AlertNotification and AlertComponent.\r\n */\r\nexport class AlertTypes {\r\n  public static readonly Information: string = 'alert-info';\r\n  public static readonly Warning: string = 'alert-warning';\r\n  public static readonly Danger: string = 'alert-danger';\r\n  public static readonly Success: string = 'alert-success';\r\n}\r\n","import { AlertTypes } from './alert-types.constants';\r\n\r\nexport class AlertNotification {\r\n  type: string = AlertTypes.Information; // alert-warning, alert-success, alert-info, alert-danger\r\n  header: string;\r\n  title: string;\r\n  messages: Array<string> = new Array<string>();\r\n  showAlert = false;\r\n\r\n  constructor(\r\n    header: string,\r\n    title: string,\r\n    messages?: Array<string>,\r\n    type?: string\r\n  ) {\r\n    if (type) {\r\n      this.type = type;\r\n    }\r\n\r\n    this.header = header;\r\n    this.title = title;\r\n    if (messages) {\r\n      this.messages = messages;\r\n    }\r\n\r\n    if (this.header && this.title) {\r\n      this.showAlert = true; // used to trigger the display of the notification.\r\n    }\r\n  }\r\n}\r\n","import { Router, NavigationEnd } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport {\r\n  MessageType,\r\n  ServiceContext,\r\n  ServiceMessage\r\n} from '@angularlicious/rules-engine';\r\nimport { ErrorResponse } from './models/error-response.model';\r\nimport {\r\n  AngularliciousLoggingService,\r\n  Severity\r\n} from '@angularlicious/logging';\r\nimport { AlertNotification } from './models/alert-notification.model';\r\nimport { AlertTypes } from './models/alert-types.constants';\r\n\r\nexport class ComponentBase {\r\n  componentName: string;\r\n  alertNotification: AlertNotification;\r\n  navSubscription: Subscription;\r\n\r\n  constructor(\r\n    componentName: string,\r\n    public loggingService: AngularliciousLoggingService,\r\n    public router: Router\r\n  ) {\r\n    this.componentName = componentName;\r\n    this.alertNotification = new AlertNotification('', '');\r\n\r\n    this.router.events.subscribe(event => {\r\n      if (event instanceof NavigationEnd) {\r\n        this.googleAnalyticsPageview(event);\r\n      }\r\n    });\r\n    // const routerEvent = this.router.events.filter(\r\n    //   event => event instanceof NavigationEnd\r\n    // );\r\n    // if (routerEvent && routerEvent instanceof NavigationEnd) {\r\n    //   this.googleAnalyticsPageview(routerEvent);\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * Use to send an analytic event to [Google Analytics].\r\n   * @param category A category is a name that you supply as a way to group objects that you want to track. Typically, you will use the same category name multiple times over related UI elements that you want to group under a given category.\r\n   * @param action Use the action parameter to name the type of event or interaction you want to track for a particular web object (i.e., play, stop, pause, download). A unique event is determined by a unique action name. You can use duplicate action names across categories, but this can affect how unique events are calculated. See the suggestions below and the Implicit Count section for more details.\r\n   * @param label Provide additional information for events that you want to track, such as the movie title in the video examples above, or the name of a file when tracking downloads. All labels are listed independently from their parent categories and actions. This provides you with another useful way to segment the event data for your reports. All labels are listed independently from their parent categories and actions. This provides you with another useful way to segment the event data for your reports.\r\n   * @param value Any numeric value indicating a [value] that will be summarized for the analytic item(s).\r\n   *\r\n   * More information at: https://support.google.com/analytics/answer/1033068\r\n   * or https://developers.google.com/analytics/devguides/collection/analyticsjs/events\r\n   */\r\n  public googleAnalyticsSendEvent(\r\n    category: string,\r\n    action: string,\r\n    label: string,\r\n    value: number\r\n  ) {\r\n    (<any>window).gtag('event', action, {\r\n      event_category: category,\r\n      event_label: label,\r\n      value: value\r\n    });\r\n  }\r\n\r\n  private googleAnalyticsPageview(event: NavigationEnd) {\r\n    if (event && event.urlAfterRedirects) {\r\n      this.loggingService.log(\r\n        this.componentName,\r\n        Severity.Information,\r\n        `Preparing to set [Google Analytics] page view for [${\r\n          event.urlAfterRedirects\r\n        }].`\r\n      );\r\n      // (<any>window).ga('set', 'page', event.urlAfterRedirects);\r\n      // (<any>window).ga('send', 'pageview');\r\n      // ga('create', 'UA-110194344-1', 'auto', this.componentName);\r\n      // ga(`${this.componentName}.send`, 'pageview');\r\n\r\n      // https://blog.thecodecampus.de/angular-2-google-analytics-google-tag-manager/\r\n      // https://developers.google.com/analytics/devguides/collection/gtagjs/pages\r\n      const GA_TRACKING_ID = 'UA-110194344-1';\r\n      // gtag('config', 'GA_TRACKING_ID', {<pageview_parameters>});\r\n      (<any>window).ga('config', GA_TRACKING_ID, {\r\n        page_title: this.componentName,\r\n        page_path: event.urlAfterRedirects\r\n      });\r\n    } else {\r\n      this.loggingService.log(\r\n        this.componentName,\r\n        Severity.Warning,\r\n        `Failed to set [Google Analytics] page view.`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use to create a simple [ErrorResponse] with the specified message.\r\n   * @param message The message to display to the user.\r\n   */\r\n  createErrorResponse(message: string): ErrorResponse {\r\n    this.loggingService.log(\r\n      this.componentName,\r\n      Severity.Information,\r\n      `Preparing to create error response for component.`\r\n    );\r\n    const errorResponse: ErrorResponse = new ErrorResponse();\r\n    errorResponse.Message = message;\r\n    return errorResponse;\r\n  }\r\n\r\n  /**\r\n   * Use to handle service errors. These are error response [See: ErrorResponse] from\r\n   * the application business layers (Action(s) or Http) that will bubble up to the\r\n   * caller (i.e., a component) in a specified format:\r\n   *\r\n   * IsSuccess: boolean = false; // default for ErrorResponse\r\n   * Message: string;\r\n   * Errors: Array<ServiceError> = new Array<ServiceError>();\r\n   * Exception: any;\r\n   */\r\n  handleServiceErrors(\r\n    errorResponse: ErrorResponse,\r\n    serviceContext?: ServiceContext\r\n  ) {\r\n    this.loggingService.log(\r\n      this.componentName,\r\n      Severity.Information,\r\n      `Preparing to handle service errors for component.`\r\n    );\r\n    if (serviceContext && serviceContext.hasErrors()) {\r\n      this.loggingService.log(\r\n        this.componentName,\r\n        Severity.Information,\r\n        `Retrieving error messages from the ServiceContext/ValidationContext;`\r\n      );\r\n      const messages = this.retrieveServiceContextErrorMessages(serviceContext);\r\n      this.alertNotification = new AlertNotification(\r\n        'Errors',\r\n        errorResponse.Message,\r\n        messages,\r\n        AlertTypes.Warning\r\n      );\r\n    } else {\r\n      if (errorResponse && errorResponse.Message) {\r\n        this.loggingService.log(\r\n          this.componentName,\r\n          Severity.Information,\r\n          `Retrieving error messages from the [ErrorResponse].`\r\n        );\r\n        const errors = this.retrieveResponseErrorMessages(errorResponse);\r\n        this.alertNotification = new AlertNotification(\r\n          'Error',\r\n          errorResponse.Message,\r\n          errors,\r\n          AlertTypes.Warning\r\n        );\r\n        this.loggingService.log(\r\n          this.componentName,\r\n          Severity.Error,\r\n          `Error: ${errorResponse.Message}`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use to retrieve the error messages from the specified [ServiceContext].\r\n   *\r\n   * @parm: serviceContext: A context object containing messages for the specified request.\r\n   */\r\n  retrieveServiceContextErrorMessages(\r\n    serviceContext: ServiceContext\r\n  ): Array<string> {\r\n    const messages = Array<string>();\r\n    serviceContext.Messages.forEach(e => {\r\n      if (e.MessageType === MessageType.Error && e.DisplayToUser) {\r\n        messages.push(e.Message);\r\n      }\r\n    });\r\n    return messages;\r\n  }\r\n\r\n  /**\r\n   * Use to retrieve the error messages from the specified Web API response.\r\n   */\r\n  retrieveResponseErrorMessages(errorResponse: ErrorResponse) {\r\n    const errors = new Array<string>();\r\n    if (errorResponse && errorResponse.Errors) {\r\n      errorResponse.Errors.forEach(e => {\r\n        if (e.DisplayToUser) {\r\n          errors.push(e.Message);\r\n        }\r\n      });\r\n    }\r\n    return errors;\r\n  }\r\n\r\n  /**\r\n   * Use to reset the [AlertNotification] to the initial state. Removes\r\n   * existing messages and hides the AlertComponent.\r\n   */\r\n  resetAlertNotifications() {\r\n    this.alertNotification = new AlertNotification('', '');\r\n  }\r\n\r\n  /**\r\n   * Use to navigate to the specified route.\r\n   * @parm routeName The name of the target route.\r\n   */\r\n  public routeTo(routeName: string) {\r\n    try {\r\n      this.router.navigate([routeName]);\r\n    } catch (error) {\r\n      this.loggingService.log(\r\n        this.componentName,\r\n        Severity.Error,\r\n        `Error while attempting to navigate to [${routeName}] route from ${\r\n          this.componentName\r\n        }. Error: ${error.toString()}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use to retrieve and show any response error messages.\r\n   */\r\n  showResponseErrors(response: ErrorResponse) {\r\n    this.handleServiceErrors(response, undefined);\r\n  }\r\n\r\n  finishRequest(message: string): void {\r\n    this.loggingService.log(\r\n      this.componentName,\r\n      Severity.Information,\r\n      `${this.componentName}: ${message}`\r\n    );\r\n  }\r\n\r\n  protected showAlertMessage(message: string): void {\r\n    alert(message);\r\n  }\r\n}\r\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { HttpRequestMethod } from './http-request-methods.enum';\r\n\r\nexport class HttpRequestOptions {\r\n  requestMethod: HttpRequestMethod;\r\n  body?: any;\r\n  headers?: HttpHeaders | { [header: string]: string | string[] };\r\n  observe?: 'body';\r\n  params?: HttpParams | { [param: string]: string | string[] };\r\n  reportProgress?: boolean;\r\n  // responseType: 'arraybuffer';\r\n  withCredentials?: boolean;\r\n  requestUrl: string;\r\n}\r\n","export enum HttpRequestMethod {\r\n  get,\r\n  post,\r\n  put,\r\n  delete,\r\n  options,\r\n  head,\r\n  patch\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  HttpClient,\r\n  HttpEvent,\r\n  HttpHeaders,\r\n  HttpParams,\r\n  HttpResponse\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { HttpRequestOptions } from './models/http-request-options';\r\nimport { HttpRequestMethod } from './models/http-request-methods.enum';\r\nimport { Severity } from '@angularlicious/logging';\r\nimport { AngularliciousLoggingService } from '@angularlicious/logging';\r\nimport { ErrorResponse } from './models/error-response.model';\r\nimport { ServiceResponse } from './models/service-response.model';\r\n\r\n/**\r\n * Use to create and execute HTTP service requests.\r\n * 1. Create HttpHeaders\r\n * 2. Create RequestOptions\r\n * 3. Execute Request\r\n * \r\n * More information at: https://angular.io/guide/http\r\n */\r\n@Injectable()\r\nexport class HttpBaseService {\r\n  public serviceName = 'HttpBaseService';\r\n  accessToken: string;\r\n\r\n  constructor(\r\n    public http: HttpClient,\r\n    public loggingService: AngularliciousLoggingService\r\n  ) {}\r\n\r\n  /**\r\n   * Use to create a [Header] for [multipart/form-data].\r\n   */\r\n  createMultipartFormDataHeader(requiresAuthToken: boolean) {\r\n    this.loggingService.log(\r\n      this.serviceName,\r\n      Severity.Information,\r\n      `Preparing to create header for the [multipart/form-data] HTTP request. RequiresAuthToken: ${requiresAuthToken}.`\r\n    );\r\n    const headers = new HttpHeaders();\r\n    if (requiresAuthToken) {\r\n      // create header request with security token;\r\n      headers.append('Authorization', `Bearer ${this.accessToken}`);\r\n    }\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * Use to create a [Header] for Content-Type [application/x-www-form-urlencoded].\r\n   */\r\n  createFormUrlencodedHeader() {\r\n    this.loggingService.log(\r\n      this.serviceName,\r\n      Severity.Information,\r\n      `Preparing to create header for the [application/x-www-form-urlencoded] HTTP request.`\r\n    );\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/x-www-form-urlencoded'\r\n    });\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * Use to create a [Header] for the HTTP request. If the [requiresAuthToken] indicator\r\n   * is true, the request will use the current Authorization security token.\r\n   * @param isSecure\r\n   */\r\n  createHeader(requiresAuthToken: boolean) {\r\n    this.loggingService.log(\r\n      this.serviceName,\r\n      Severity.Information,\r\n      `Preparing to create header for the HTTP request. RequiresAuthToken: ${requiresAuthToken}.`\r\n    );\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    if (requiresAuthToken) {\r\n      headers.append('Authorization', `Bearer ${this.accessToken}`);\r\n    }\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * Use this method to create a new HttpRequestOptions item for a request.\r\n   * @param headers Use to supply header information in the request.\r\n   * @param url Use to indicate the URL of the web api.\r\n   * @param body Use to provide a data payload for the request.\r\n   */\r\n  createRequestOptions(\r\n    method: HttpRequestMethod,\r\n    headers: HttpHeaders,\r\n    url: string,\r\n    body: any\r\n  ) {\r\n    this.loggingService.log(\r\n      this.serviceName,\r\n      Severity.Information,\r\n      `Preparing to create request options for the HTTP request.`\r\n    );\r\n    const options = new HttpRequestOptions();\r\n    options.headers = headers;\r\n    options.requestUrl = url;\r\n    options.body = body;\r\n\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Use to execute an HTTP request using the specified header and URL.\r\n   */\r\n  executeRequest(\r\n    requestOptions: HttpRequestOptions\r\n  ): Observable<ServiceResponse> {\r\n    this.loggingService.log(\r\n      this.serviceName,\r\n      Severity.Information,\r\n      `Preparing to execute HTTP request. Url: ${requestOptions.requestUrl}`\r\n    );\r\n\r\n    return this.http.request<ServiceResponse>(\r\n      requestOptions.requestMethod.toString(),\r\n      requestOptions.requestUrl,\r\n      requestOptions\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Use to execute an HTTP [get] request using the specified url and options.\r\n   */\r\n  get<ServiceResponse>(requestOptions: HttpRequestOptions): Observable<ServiceResponse> \r\n  {\r\n    requestOptions.requestMethod = HttpRequestMethod.get;\r\n    return this.http\r\n      .get<ServiceResponse>(requestOptions.requestUrl, requestOptions)\r\n      .pipe(\r\n        // catchError(error => this.handleHttpError(error, requestOptions))\r\n      )\r\n  }\r\n\r\n  /**\r\n   * Use to execute an HTTP [post] request using the specified url and options.\r\n   * @param requestOptions use to define the options for the specified request.\r\n   */\r\n  post<ServiceResponse>(requestOptions: HttpRequestOptions): Observable<ServiceResponse> \r\n  { \r\n    this.http.options\r\n    return this.http\r\n      .post<ServiceResponse>(requestOptions.requestUrl, requestOptions.body, {\r\n        headers: requestOptions.headers\r\n      })\r\n      .pipe(\r\n        // catchError(error => this.handleHttpError(error, requestOptions))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Use to handle HTTP errors when calling web api(s).\r\n   */\r\n  handleHttpError(error: any, requestOptions: HttpRequestOptions): Observable<ServiceResponse> {\r\n    const message = `${error.toString()} ${requestOptions.requestUrl}, ${JSON.stringify(requestOptions.body)}`;\r\n    this.loggingService.log(this.serviceName, Severity.Error, message);\r\n    if (error && error._body) {\r\n      /**\r\n       * This is an error that contains a body - a [Response] from the application web api. Includes:\r\n       * 1. IsSuccess\r\n       * 2. Message\r\n       * 3. Array of ServiceError items\r\n       * 4. Exception (optional)\r\n       */\r\n      try {\r\n        const response: ErrorResponse = error.json();\r\n        if (response) {\r\n          const subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n          return subject.asObservable();\r\n        } else {\r\n          // TODO: RETRIEVE ERROR DETAILS; STATUS, MESSAGE; ETC. AND PROVIDE TO HANDLER;\r\n          return this.handleUnexpectedError(error);\r\n        }\r\n      } catch (ex) {\r\n        const err = <Error>ex;\r\n        const errorMessage = `${err.name}; ${err.message}`;\r\n        this.loggingService.log(this.serviceName, Severity.Error, errorMessage);\r\n        return this.handleUnexpectedError(err);\r\n      }\r\n    } else {\r\n      return this.handleUnexpectedError(error);\r\n    }\r\n  }\r\n\r\n  handleUnexpectedError(error?: Error): Observable<ServiceResponse> {\r\n    const response = this.createErrorResponse(error);\r\n    const subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n    return subject.asObservable();\r\n  }\r\n\r\n  createErrorResponse(error?: Error): ServiceResponse {\r\n    let message = 'Unexpected error while processing response.';\r\n    const response: ErrorResponse = new ErrorResponse();\r\n    if (error instanceof Error) {\r\n      message = `${error.name} - ${error.message}`;\r\n      response.Exception = error;\r\n    }\r\n    response.Message = message;\r\n    return response;\r\n  }\r\n}\r\n","/**\r\n * Use this model to represent service error/message information from the\r\n * application's service APIs.\r\n *\r\n * The DisplayToUser boolean value indicates whether the message should be\r\n * displayed to the user if desired.\r\n */\r\nexport class ServiceError {\r\n  // \"{\"IsSuccess\":false,\r\n  // \"Message\":\"Failed to create new user account.\",\r\n  // \"Errors\":[{\"Name\":\"PasswordFormatIsValid\",\r\n  // \"Message\":\"The password format is not valid. Must contain at least one: alpha, numeric, and special character.\",\r\n  // \"Exception\":null,\"Source\":\"CreateLearnerAccountAction\",\r\n  // DisplayToUser\":true,\"Target\":\"\"}]}\"\r\n\r\n  Name: string;\r\n  Message: string;\r\n  Exception: any;\r\n  DisplayToUser: boolean;\r\n  Source: string;\r\n  Target: string;\r\n}\r\n"]}