{"version":3,"file":"angularlicious-actions.umd.js.map","sources":["ng://@angularlicious/actions/lib/actions.module.ts","ng://@angularlicious/actions/lib/Action.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AngularliciousRulesEngineModule } from '@angularlicious/rules-engine';\n\n@NgModule({\n  imports: [AngularliciousRulesEngineModule, CommonModule]\n})\nexport class ActionsModule {}\n","import { ValidationContext } from '@angularlicious/rules-engine';\nimport { ValidationContextState } from '@angularlicious/rules-engine';\nimport { IAction } from './IAction';\nimport { ActionResult } from './ActionResult';\n\n/**\n * This is the framework Action class that provides the pipeline of pre/post\n * execution methods. This class implements the [Template Method] pattern.\n *\n * The pre-execute functions that can be implemented are:\n *\t\t1. start();\n *\t\t2. audit();\n *\t\t3. preValidateAction();\n *\t\t4. evaluateRules();\n *\t\t5. postValidateAction();\n *\t\t6. preExecuteAction();\n *\n *If the status of action is good, the business logic will be executed using the:\n *\t\t7. processAction();\n *\n * The post-execution functions that can be implemented are:\n *\t\t8. postExecuteAction();\n *\t\t9. validateActionResult();\n *\t\t10. finish();\n */\nexport class Action implements IAction {\n  /**\n   * Indicates if the action is allowed execution. If there are any rule\n   * violations in the validation context, the action is not allowed to\n   * execute.\n   */\n  allowExecution = true;\n\n  /**\n   * The validation context for the specified action instance.\n   */\n  private _validationContext: ValidationContext = new ValidationContext();\n\n  /**\n   * The result of the action. The default value is [Unknown], until the action\n   * is executed.\n   */\n  actionResult: ActionResult = ActionResult.Unknown;\n\n  /**\n   * The default constructor for the class.\n   */\n  constructor() {}\n\n  /**\n   * Use to retrieve the [ValidationContext] for the specified action.\n   */\n  get validationContext(): ValidationContext {\n    return this._validationContext;\n  }\n\n  /**\n   * Use this method to execute a concrete action. A concrete action must implement\n   * the [processAction] and the [validateActionResult] functions to be a valid\n   * action.\n   */\n  execute() {\n    console.log('Preparing to execute action.');\n    this.processActionPipeline();\n  }\n\n  /**\n   * Use this method to process the action pipeline methods.\n   */\n  private processActionPipeline() {\n    this.startAction();\n    if (this.allowExecution) {\n      this.processAction();\n    }\n    this.finishAction();\n  }\n\n  /**\n   * Use this method to call the pipeline methods for the [start] or beginning\n   * process of the action pipeline.\n   */\n  private startAction() {\n    console.log('Starting action.');\n    this.start();\n    this.audit();\n    this.preValidateAction();\n    this.evaluateRules();\n    this.postValidateAction();\n    this.preExecuteAction();\n  }\n\n  /**\n   * Use this method to execute the methods at the end of the action pipeline.\n   */\n  private finishAction() {\n    console.log('Finishing action.');\n    this.postExecuteAction();\n    this.validateActionResult();\n    this.finish();\n  }\n\n  /**\n   * Use this method to process the action. This will only be called if the action's\n   * validation context is in a valid state (no rule violations).\n   *\n   * All concrete actions are required to provide an implementation of the [performAction]\n   * method that is called for this part of the action pipeline.\n   */\n  private processAction() {\n    console.log('Processing action.');\n    this.performAction();\n  }\n\n  /**\n   * All action must implement this function. This is where your\n   * [business logic] should be implemented. This function is called if\n   * there are no validation rule exceptions.\n   */\n  performAction() {\n    throw new Error(\n      'Not implemented. Requires implementation in concrete action.'\n    );\n  }\n\n  /**\n   * Override/Implement this function to perform an early operation in the action pipeline.\n   * This function belongs to the pre-execute functions of the action pipeline.\n   */\n  start() {\n    console.log('Starting action.');\n  }\n\n  /**\n   * Implement this function to perform any auditing features during the pre-exectuion of the\n   * business logic.\n   */\n  audit() {\n    console.log('Auditing action.');\n  }\n\n  /**\n   * Use this function to setup any validation rules before the validation happens. This\n   * function is called before [evaluateRules].\n   */\n  preValidateAction() {\n    console.log('Pre-validating action.');\n  }\n\n  /**\n   * Use this function to implement the execution of the validation and business rules. This\n   * function is called after [preValidateAction].\n   */\n  evaluateRules() {\n    console.log('Evaluating action rules.');\n    const context = this.validateAction();\n    if (context.isValid) {\n      this.allowExecution = true;\n      this.validationContext.state = ValidationContextState.Success;\n    } else {\n      this.allowExecution = false;\n      this.validationContext.state = ValidationContextState.Failure;\n    }\n  }\n\n  /**\n   * Use to determine or handle the results of the rule evalation. This\n   * function is called after the [evaluateRules].\n   */\n  postValidateAction() {\n    console.log('Post-Validation of action.');\n  }\n\n  /**\n   * Use this function to perform any setup before the action is executed.\n   */\n  preExecuteAction() {\n    console.log('Pre-execution of action.');\n  }\n\n  /**\n   * Use this funciton to evaluate the action after the the business logic within\n   * the [performAction] has executed.\n   */\n  postExecuteAction() {\n    console.log('Post-execution of action');\n  }\n\n  /**\n   * This function requires implementation to determin the state and result of the action.\n   * Use this opportunity to validate the results.\n   */\n  validateActionResult(): ActionResult {\n    throw new Error('Concrete actions required to implement this method.');\n  }\n\n  /**\n   * Use this function to perform any cleanup, logging, or disposing of resources used\n   * by the action. This is the last function called during the pipeline.\n   */\n  finish() {\n    console.log('Finish action.');\n  }\n\n  /**\n   * Implement this function to perform validation of business rules and data.\n   */\n  validateAction() {\n    console.log('Validating the action.');\n    return this.validationContext;\n  }\n}\n"],"names":["NgModule","AngularliciousRulesEngineModule","CommonModule","ValidationContext","ValidationContextState"],"mappings":"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"}
