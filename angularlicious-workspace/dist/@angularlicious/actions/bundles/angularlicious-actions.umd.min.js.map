{"version":3,"sources":["ng://@angularlicious/actions/lib/actions.module.ts","ng://@angularlicious/actions/lib/ActionResult.ts","ng://@angularlicious/actions/lib/Action.ts"],"names":["ActionsModule","NgModule","args","imports","AngularliciousRulesEngineModule","CommonModule","Success","Fail","Unknown","Action","this","allowExecution","_validationContext","ValidationContext","actionResult","ActionResult","Object","defineProperty","prototype","execute","console","log","processActionPipeline","startAction","processAction","finishAction","start","audit","preValidateAction","evaluateRules","postValidateAction","preExecuteAction","postExecuteAction","validateActionResult","finish","performAction","Error","validateAction","isValid","validationContext","state","ValidationContextState","Failure"],"mappings":"kdAAA,IAAAA,EAAA,WAIA,SAAAA,KAG4B,2BAH3BC,EAAAA,SAAQC,KAAA,CAAC,CACRC,QAAS,CAACC,EAAAA,gCAAiCC,EAAAA,kBAEjBL,EAP5B,MCOEM,QAAA,EAKAC,KAAA,EAKAC,QAAA,kECQF,iBAsBE,SAAAC,IAhBAC,KAAAC,gBAAiB,EAKTD,KAAAE,mBAAwC,IAAIC,EAAAA,kBAMpDH,KAAAI,aAA6BC,EAAaP,QAwK5C,OA9JEQ,OAAAC,eAAIR,EAAAS,UAAA,oBAAiB,KAArB,WACE,OAAOR,KAAKE,oDAQdH,EAAAS,UAAAC,QAAA,WACEC,QAAQC,IAAI,gCACZX,KAAKY,yBAMCb,EAAAS,UAAAI,sBAAR,WACEZ,KAAKa,cACDb,KAAKC,gBACPD,KAAKc,gBAEPd,KAAKe,gBAOChB,EAAAS,UAAAK,YAAR,WACEH,QAAQC,IAAI,oBACZX,KAAKgB,QACLhB,KAAKiB,QACLjB,KAAKkB,oBACLlB,KAAKmB,gBACLnB,KAAKoB,qBACLpB,KAAKqB,oBAMCtB,EAAAS,UAAAO,aAAR,WACEL,QAAQC,IAAI,qBACZX,KAAKsB,oBACLtB,KAAKuB,uBACLvB,KAAKwB,UAUCzB,EAAAS,UAAAM,cAAR,WACEJ,QAAQC,IAAI,sBACZX,KAAKyB,iBAQP1B,EAAAS,UAAAiB,cAAA,WACE,MAAM,IAAIC,MACR,iEAQJ3B,EAAAS,UAAAQ,MAAA,WACEN,QAAQC,IAAI,qBAOdZ,EAAAS,UAAAS,MAAA,WACEP,QAAQC,IAAI,qBAOdZ,EAAAS,UAAAU,kBAAA,WACER,QAAQC,IAAI,2BAOdZ,EAAAS,UAAAW,cAAA,WACET,QAAQC,IAAI,4BACIX,KAAK2B,iBACTC,SACV5B,KAAKC,gBAAiB,EACtBD,KAAK6B,kBAAkBC,MAAQC,EAAAA,uBAAuBnC,UAEtDI,KAAKC,gBAAiB,EACtBD,KAAK6B,kBAAkBC,MAAQC,EAAAA,uBAAuBC,UAQ1DjC,EAAAS,UAAAY,mBAAA,WACEV,QAAQC,IAAI,+BAMdZ,EAAAS,UAAAa,iBAAA,WACEX,QAAQC,IAAI,6BAOdZ,EAAAS,UAAAc,kBAAA,WACEZ,QAAQC,IAAI,6BAOdZ,EAAAS,UAAAe,qBAAA,WACE,MAAM,IAAIG,MAAM,wDAOlB3B,EAAAS,UAAAgB,OAAA,WACEd,QAAQC,IAAI,mBAMdZ,EAAAS,UAAAmB,eAAA,WAEE,OADAjB,QAAQC,IAAI,0BACLX,KAAK6B,mBAEhB9B","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AngularliciousRulesEngineModule } from '@angularlicious/rules-engine';\r\n\r\n@NgModule({\r\n  imports: [AngularliciousRulesEngineModule, CommonModule]\r\n})\r\nexport class ActionsModule {}\r\n","/**\r\n * Use to indicate the result of the action (i.e., Sucess, Fail, or Unknown).\r\n */\r\nexport enum ActionResult {\r\n  /**\r\n   * Use to indicate that the action's result is success.\r\n   */\r\n  Success = 1,\r\n\r\n  /**\r\n   * Use to indicate that the action's result is failure.\r\n   */\r\n  Fail = 2,\r\n\r\n  /**\r\n   * Use to indicate that the action's result is unknown.\r\n   */\r\n  Unknown = 3\r\n}\r\n","import { ValidationContext } from '@angularlicious/rules-engine';\r\nimport { ValidationContextState } from '@angularlicious/rules-engine';\r\nimport { IAction } from './IAction';\r\nimport { ActionResult } from './ActionResult';\r\n\r\n/**\r\n * This is the framework Action class that provides the pipeline of pre/post\r\n * execution methods. This class implements the [Template Method] pattern.\r\n *\r\n * The pre-execute functions that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t7. processAction();\r\n *\r\n * The post-execution functions that can be implemented are:\r\n *\t\t8. postExecuteAction();\r\n *\t\t9. validateActionResult();\r\n *\t\t10. finish();\r\n */\r\nexport class Action implements IAction {\r\n  /**\r\n   * Indicates if the action is allowed execution. If there are any rule\r\n   * violations in the validation context, the action is not allowed to\r\n   * execute.\r\n   */\r\n  allowExecution = true;\r\n\r\n  /**\r\n   * The validation context for the specified action instance.\r\n   */\r\n  private _validationContext: ValidationContext = new ValidationContext();\r\n\r\n  /**\r\n   * The result of the action. The default value is [Unknown], until the action\r\n   * is executed.\r\n   */\r\n  actionResult: ActionResult = ActionResult.Unknown;\r\n\r\n  /**\r\n   * The default constructor for the class.\r\n   */\r\n  constructor() {}\r\n\r\n  /**\r\n   * Use to retrieve the [ValidationContext] for the specified action.\r\n   */\r\n  get validationContext(): ValidationContext {\r\n    return this._validationContext;\r\n  }\r\n\r\n  /**\r\n   * Use this method to execute a concrete action. A concrete action must implement\r\n   * the [processAction] and the [validateActionResult] functions to be a valid\r\n   * action.\r\n   */\r\n  execute() {\r\n    console.log('Preparing to execute action.');\r\n    this.processActionPipeline();\r\n  }\r\n\r\n  /**\r\n   * Use this method to process the action pipeline methods.\r\n   */\r\n  private processActionPipeline() {\r\n    this.startAction();\r\n    if (this.allowExecution) {\r\n      this.processAction();\r\n    }\r\n    this.finishAction();\r\n  }\r\n\r\n  /**\r\n   * Use this method to call the pipeline methods for the [start] or beginning\r\n   * process of the action pipeline.\r\n   */\r\n  private startAction() {\r\n    console.log('Starting action.');\r\n    this.start();\r\n    this.audit();\r\n    this.preValidateAction();\r\n    this.evaluateRules();\r\n    this.postValidateAction();\r\n    this.preExecuteAction();\r\n  }\r\n\r\n  /**\r\n   * Use this method to execute the methods at the end of the action pipeline.\r\n   */\r\n  private finishAction() {\r\n    console.log('Finishing action.');\r\n    this.postExecuteAction();\r\n    this.validateActionResult();\r\n    this.finish();\r\n  }\r\n\r\n  /**\r\n   * Use this method to process the action. This will only be called if the action's\r\n   * validation context is in a valid state (no rule violations).\r\n   *\r\n   * All concrete actions are required to provide an implementation of the [performAction]\r\n   * method that is called for this part of the action pipeline.\r\n   */\r\n  private processAction() {\r\n    console.log('Processing action.');\r\n    this.performAction();\r\n  }\r\n\r\n  /**\r\n   * All action must implement this function. This is where your\r\n   * [business logic] should be implemented. This function is called if\r\n   * there are no validation rule exceptions.\r\n   */\r\n  performAction() {\r\n    throw new Error(\r\n      'Not implemented. Requires implementation in concrete action.'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Override/Implement this function to perform an early operation in the action pipeline.\r\n   * This function belongs to the pre-execute functions of the action pipeline.\r\n   */\r\n  start() {\r\n    console.log('Starting action.');\r\n  }\r\n\r\n  /**\r\n   * Implement this function to perform any auditing features during the pre-exectuion of the\r\n   * business logic.\r\n   */\r\n  audit() {\r\n    console.log('Auditing action.');\r\n  }\r\n\r\n  /**\r\n   * Use this function to setup any validation rules before the validation happens. This\r\n   * function is called before [evaluateRules].\r\n   */\r\n  preValidateAction() {\r\n    console.log('Pre-validating action.');\r\n  }\r\n\r\n  /**\r\n   * Use this function to implement the execution of the validation and business rules. This\r\n   * function is called after [preValidateAction].\r\n   */\r\n  evaluateRules() {\r\n    console.log('Evaluating action rules.');\r\n    const context = this.validateAction();\r\n    if (context.isValid) {\r\n      this.allowExecution = true;\r\n      this.validationContext.state = ValidationContextState.Success;\r\n    } else {\r\n      this.allowExecution = false;\r\n      this.validationContext.state = ValidationContextState.Failure;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use to determine or handle the results of the rule evalation. This\r\n   * function is called after the [evaluateRules].\r\n   */\r\n  postValidateAction() {\r\n    console.log('Post-Validation of action.');\r\n  }\r\n\r\n  /**\r\n   * Use this function to perform any setup before the action is executed.\r\n   */\r\n  preExecuteAction() {\r\n    console.log('Pre-execution of action.');\r\n  }\r\n\r\n  /**\r\n   * Use this funciton to evaluate the action after the the business logic within\r\n   * the [performAction] has executed.\r\n   */\r\n  postExecuteAction() {\r\n    console.log('Post-execution of action');\r\n  }\r\n\r\n  /**\r\n   * This function requires implementation to determin the state and result of the action.\r\n   * Use this opportunity to validate the results.\r\n   */\r\n  validateActionResult(): ActionResult {\r\n    throw new Error('Concrete actions required to implement this method.');\r\n  }\r\n\r\n  /**\r\n   * Use this function to perform any cleanup, logging, or disposing of resources used\r\n   * by the action. This is the last function called during the pipeline.\r\n   */\r\n  finish() {\r\n    console.log('Finish action.');\r\n  }\r\n\r\n  /**\r\n   * Implement this function to perform validation of business rules and data.\r\n   */\r\n  validateAction() {\r\n    console.log('Validating the action.');\r\n    return this.validationContext;\r\n  }\r\n}\r\n"]}