{"version":3,"sources":["ng://@angularlicious/actions/lib/actions.module.ts","ng://@angularlicious/actions/lib/Action.ts"],"names":["ActionsModule","NgModule","args","imports","AngularliciousRulesEngineModule","CommonModule","Action","ValidationContext","ActionResult","Unknown","Object","defineProperty","prototype","this","_validationContext","execute","console","log","processActionPipeline","startAction","allowExecution","processAction","finishAction","start","audit","preValidateAction","evaluateRules","postValidateAction","preExecuteAction","postExecuteAction","validateActionResult","finish","performAction","Error","validateAction","isValid","validationContext","state","ValidationContextState","Success","Failure"],"mappings":"ycAAA,IAAAA,EAAA,oDAICC,EAAAA,SAAQC,KAAA,CAAC,CACRC,QAAS,CAACC,EAAAA,gCAAiCC,EAAAA,oBAL7C,iGCyBA,IAAAC,EAAA,WAsBE,SAAAA,yBAhBiB,0BAK+B,IAAIC,EAAAA,oCAMvBC,EAAaC,eAU1CC,OAAAC,eAAIL,EAAAM,UAAA,oBAAiB,KAArB,WACE,OAAOC,KAAKC,oDAQdR,EAAAM,UAAAG,QAAA,WACEC,QAAQC,IAAI,gCACZJ,KAAKK,yBAMCZ,EAAAM,UAAAM,iCACNL,KAAKM,cACDN,KAAKO,gBACPP,KAAKQ,gBAEPR,KAAKS,gBAOChB,EAAAM,UAAAO,uBACNH,QAAQC,IAAI,oBACZJ,KAAKU,QACLV,KAAKW,QACLX,KAAKY,oBACLZ,KAAKa,gBACLb,KAAKc,qBACLd,KAAKe,oBAMCtB,EAAAM,UAAAU,wBACNN,QAAQC,IAAI,qBACZJ,KAAKgB,oBACLhB,KAAKiB,uBACLjB,KAAKkB,UAUCzB,EAAAM,UAAAS,yBACNL,QAAQC,IAAI,sBACZJ,KAAKmB,iBAQP1B,EAAAM,UAAAoB,cAAA,WACE,MAAM,IAAIC,MACR,iEAQJ3B,EAAAM,UAAAW,MAAA,WACEP,QAAQC,IAAI,qBAOdX,EAAAM,UAAAY,MAAA,WACER,QAAQC,IAAI,qBAOdX,EAAAM,UAAAa,kBAAA,WACET,QAAQC,IAAI,2BAOdX,EAAAM,UAAAc,cAAA,WACEV,QAAQC,IAAI,4BACIJ,KAAKqB,iBACTC,SACVtB,KAAKO,gBAAiB,EACtBP,KAAKuB,kBAAkBC,MAAQC,EAAAA,uBAAuBC,UAEtD1B,KAAKO,gBAAiB,EACtBP,KAAKuB,kBAAkBC,MAAQC,EAAAA,uBAAuBE,UAQ1DlC,EAAAM,UAAAe,mBAAA,WACEX,QAAQC,IAAI,+BAMdX,EAAAM,UAAAgB,iBAAA,WACEZ,QAAQC,IAAI,6BAOdX,EAAAM,UAAAiB,kBAAA,WACEb,QAAQC,IAAI,6BAOdX,EAAAM,UAAAkB,qBAAA,WACE,MAAM,IAAIG,MAAM,wDAOlB3B,EAAAM,UAAAmB,OAAA,WACEf,QAAQC,IAAI,mBAMdX,EAAAM,UAAAsB,eAAA,WAEE,OADAlB,QAAQC,IAAI,0BACLJ,KAAKuB,qBAvLhB","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AngularliciousRulesEngineModule } from '@angularlicious/rules-engine';\n\n@NgModule({\n  imports: [AngularliciousRulesEngineModule, CommonModule]\n})\nexport class ActionsModule {}\n","import { ValidationContext } from '@angularlicious/rules-engine';\nimport { ValidationContextState } from '@angularlicious/rules-engine';\nimport { IAction } from './IAction';\nimport { ActionResult } from './ActionResult';\n\n/**\n * This is the framework Action class that provides the pipeline of pre/post\n * execution methods. This class implements the [Template Method] pattern.\n *\n * The pre-execute functions that can be implemented are:\n *\t\t1. start();\n *\t\t2. audit();\n *\t\t3. preValidateAction();\n *\t\t4. evaluateRules();\n *\t\t5. postValidateAction();\n *\t\t6. preExecuteAction();\n *\n *If the status of action is good, the business logic will be executed using the:\n *\t\t7. processAction();\n *\n * The post-execution functions that can be implemented are:\n *\t\t8. postExecuteAction();\n *\t\t9. validateActionResult();\n *\t\t10. finish();\n */\nexport class Action implements IAction {\n  /**\n   * Indicates if the action is allowed execution. If there are any rule\n   * violations in the validation context, the action is not allowed to\n   * execute.\n   */\n  allowExecution = true;\n\n  /**\n   * The validation context for the specified action instance.\n   */\n  private _validationContext: ValidationContext = new ValidationContext();\n\n  /**\n   * The result of the action. The default value is [Unknown], until the action\n   * is executed.\n   */\n  actionResult: ActionResult = ActionResult.Unknown;\n\n  /**\n   * The default constructor for the class.\n   */\n  constructor() {}\n\n  /**\n   * Use to retrieve the [ValidationContext] for the specified action.\n   */\n  get validationContext(): ValidationContext {\n    return this._validationContext;\n  }\n\n  /**\n   * Use this method to execute a concrete action. A concrete action must implement\n   * the [processAction] and the [validateActionResult] functions to be a valid\n   * action.\n   */\n  execute() {\n    console.log('Preparing to execute action.');\n    this.processActionPipeline();\n  }\n\n  /**\n   * Use this method to process the action pipeline methods.\n   */\n  private processActionPipeline() {\n    this.startAction();\n    if (this.allowExecution) {\n      this.processAction();\n    }\n    this.finishAction();\n  }\n\n  /**\n   * Use this method to call the pipeline methods for the [start] or beginning\n   * process of the action pipeline.\n   */\n  private startAction() {\n    console.log('Starting action.');\n    this.start();\n    this.audit();\n    this.preValidateAction();\n    this.evaluateRules();\n    this.postValidateAction();\n    this.preExecuteAction();\n  }\n\n  /**\n   * Use this method to execute the methods at the end of the action pipeline.\n   */\n  private finishAction() {\n    console.log('Finishing action.');\n    this.postExecuteAction();\n    this.validateActionResult();\n    this.finish();\n  }\n\n  /**\n   * Use this method to process the action. This will only be called if the action's\n   * validation context is in a valid state (no rule violations).\n   *\n   * All concrete actions are required to provide an implementation of the [performAction]\n   * method that is called for this part of the action pipeline.\n   */\n  private processAction() {\n    console.log('Processing action.');\n    this.performAction();\n  }\n\n  /**\n   * All action must implement this function. This is where your\n   * [business logic] should be implemented. This function is called if\n   * there are no validation rule exceptions.\n   */\n  performAction() {\n    throw new Error(\n      'Not implemented. Requires implementation in concrete action.'\n    );\n  }\n\n  /**\n   * Override/Implement this function to perform an early operation in the action pipeline.\n   * This function belongs to the pre-execute functions of the action pipeline.\n   */\n  start() {\n    console.log('Starting action.');\n  }\n\n  /**\n   * Implement this function to perform any auditing features during the pre-exectuion of the\n   * business logic.\n   */\n  audit() {\n    console.log('Auditing action.');\n  }\n\n  /**\n   * Use this function to setup any validation rules before the validation happens. This\n   * function is called before [evaluateRules].\n   */\n  preValidateAction() {\n    console.log('Pre-validating action.');\n  }\n\n  /**\n   * Use this function to implement the execution of the validation and business rules. This\n   * function is called after [preValidateAction].\n   */\n  evaluateRules() {\n    console.log('Evaluating action rules.');\n    const context = this.validateAction();\n    if (context.isValid) {\n      this.allowExecution = true;\n      this.validationContext.state = ValidationContextState.Success;\n    } else {\n      this.allowExecution = false;\n      this.validationContext.state = ValidationContextState.Failure;\n    }\n  }\n\n  /**\n   * Use to determine or handle the results of the rule evalation. This\n   * function is called after the [evaluateRules].\n   */\n  postValidateAction() {\n    console.log('Post-Validation of action.');\n  }\n\n  /**\n   * Use this function to perform any setup before the action is executed.\n   */\n  preExecuteAction() {\n    console.log('Pre-execution of action.');\n  }\n\n  /**\n   * Use this funciton to evaluate the action after the the business logic within\n   * the [performAction] has executed.\n   */\n  postExecuteAction() {\n    console.log('Post-execution of action');\n  }\n\n  /**\n   * This function requires implementation to determin the state and result of the action.\n   * Use this opportunity to validate the results.\n   */\n  validateActionResult(): ActionResult {\n    throw new Error('Concrete actions required to implement this method.');\n  }\n\n  /**\n   * Use this function to perform any cleanup, logging, or disposing of resources used\n   * by the action. This is the last function called during the pipeline.\n   */\n  finish() {\n    console.log('Finish action.');\n  }\n\n  /**\n   * Implement this function to perform validation of business rules and data.\n   */\n  validateAction() {\n    console.log('Validating the action.');\n    return this.validationContext;\n  }\n}\n"]}