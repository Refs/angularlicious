{"version":3,"file":"angularlicious-actions.js.map","sources":["ng://@angularlicious/actions/lib/actions.module.ts","ng://@angularlicious/actions/lib/Action.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AngularliciousRulesEngineModule } from '@angularlicious/rules-engine';\r\n\r\n@NgModule({\r\n  imports: [AngularliciousRulesEngineModule, CommonModule]\r\n})\r\nexport class ActionsModule {}\r\n","import { ValidationContext } from '@angularlicious/rules-engine';\r\nimport { ValidationContextState } from '@angularlicious/rules-engine';\r\nimport { IAction } from './IAction';\r\nimport { ActionResult } from './ActionResult';\r\n\r\n/**\r\n * This is the framework Action class that provides the pipeline of pre/post\r\n * execution methods. This class implements the [Template Method] pattern.\r\n *\r\n * The pre-execute functions that can be implemented are:\r\n *\t\t1. start();\r\n *\t\t2. audit();\r\n *\t\t3. preValidateAction();\r\n *\t\t4. evaluateRules();\r\n *\t\t5. postValidateAction();\r\n *\t\t6. preExecuteAction();\r\n *\r\n *If the status of action is good, the business logic will be executed using the:\r\n *\t\t7. processAction();\r\n *\r\n * The post-execution functions that can be implemented are:\r\n *\t\t8. postExecuteAction();\r\n *\t\t9. validateActionResult();\r\n *\t\t10. finish();\r\n */\r\nexport class Action implements IAction {\r\n  /**\r\n   * Indicates if the action is allowed execution. If there are any rule\r\n   * violations in the validation context, the action is not allowed to\r\n   * execute.\r\n   */\r\n  allowExecution = true;\r\n\r\n  /**\r\n   * The validation context for the specified action instance.\r\n   */\r\n  private _validationContext: ValidationContext = new ValidationContext();\r\n\r\n  /**\r\n   * The result of the action. The default value is [Unknown], until the action\r\n   * is executed.\r\n   */\r\n  actionResult: ActionResult = ActionResult.Unknown;\r\n\r\n  /**\r\n   * The default constructor for the class.\r\n   */\r\n  constructor() {}\r\n\r\n  /**\r\n   * Use to retrieve the [ValidationContext] for the specified action.\r\n   */\r\n  get validationContext(): ValidationContext {\r\n    return this._validationContext;\r\n  }\r\n\r\n  /**\r\n   * Use this method to execute a concrete action. A concrete action must implement\r\n   * the [processAction] and the [validateActionResult] functions to be a valid\r\n   * action.\r\n   */\r\n  execute() {\r\n    console.log('Preparing to execute action.');\r\n    this.processActionPipeline();\r\n  }\r\n\r\n  /**\r\n   * Use this method to process the action pipeline methods.\r\n   */\r\n  private processActionPipeline() {\r\n    this.startAction();\r\n    if (this.allowExecution) {\r\n      this.processAction();\r\n    }\r\n    this.finishAction();\r\n  }\r\n\r\n  /**\r\n   * Use this method to call the pipeline methods for the [start] or beginning\r\n   * process of the action pipeline.\r\n   */\r\n  private startAction() {\r\n    console.log('Starting action.');\r\n    this.start();\r\n    this.audit();\r\n    this.preValidateAction();\r\n    this.evaluateRules();\r\n    this.postValidateAction();\r\n    this.preExecuteAction();\r\n  }\r\n\r\n  /**\r\n   * Use this method to execute the methods at the end of the action pipeline.\r\n   */\r\n  private finishAction() {\r\n    console.log('Finishing action.');\r\n    this.postExecuteAction();\r\n    this.validateActionResult();\r\n    this.finish();\r\n  }\r\n\r\n  /**\r\n   * Use this method to process the action. This will only be called if the action's\r\n   * validation context is in a valid state (no rule violations).\r\n   *\r\n   * All concrete actions are required to provide an implementation of the [performAction]\r\n   * method that is called for this part of the action pipeline.\r\n   */\r\n  private processAction() {\r\n    console.log('Processing action.');\r\n    this.performAction();\r\n  }\r\n\r\n  /**\r\n   * All action must implement this function. This is where your\r\n   * [business logic] should be implemented. This function is called if\r\n   * there are no validation rule exceptions.\r\n   */\r\n  performAction() {\r\n    throw new Error(\r\n      'Not implemented. Requires implementation in concrete action.'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Override/Implement this function to perform an early operation in the action pipeline.\r\n   * This function belongs to the pre-execute functions of the action pipeline.\r\n   */\r\n  start() {\r\n    console.log('Starting action.');\r\n  }\r\n\r\n  /**\r\n   * Implement this function to perform any auditing features during the pre-exectuion of the\r\n   * business logic.\r\n   */\r\n  audit() {\r\n    console.log('Auditing action.');\r\n  }\r\n\r\n  /**\r\n   * Use this function to setup any validation rules before the validation happens. This\r\n   * function is called before [evaluateRules].\r\n   */\r\n  preValidateAction() {\r\n    console.log('Pre-validating action.');\r\n  }\r\n\r\n  /**\r\n   * Use this function to implement the execution of the validation and business rules. This\r\n   * function is called after [preValidateAction].\r\n   */\r\n  evaluateRules() {\r\n    console.log('Evaluating action rules.');\r\n    const context = this.validateAction();\r\n    if (context.isValid) {\r\n      this.allowExecution = true;\r\n      this.validationContext.state = ValidationContextState.Success;\r\n    } else {\r\n      this.allowExecution = false;\r\n      this.validationContext.state = ValidationContextState.Failure;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use to determine or handle the results of the rule evalation. This\r\n   * function is called after the [evaluateRules].\r\n   */\r\n  postValidateAction() {\r\n    console.log('Post-Validation of action.');\r\n  }\r\n\r\n  /**\r\n   * Use this function to perform any setup before the action is executed.\r\n   */\r\n  preExecuteAction() {\r\n    console.log('Pre-execution of action.');\r\n  }\r\n\r\n  /**\r\n   * Use this funciton to evaluate the action after the the business logic within\r\n   * the [performAction] has executed.\r\n   */\r\n  postExecuteAction() {\r\n    console.log('Post-execution of action');\r\n  }\r\n\r\n  /**\r\n   * This function requires implementation to determin the state and result of the action.\r\n   * Use this opportunity to validate the results.\r\n   */\r\n  validateActionResult(): ActionResult {\r\n    throw new Error('Concrete actions required to implement this method.');\r\n  }\r\n\r\n  /**\r\n   * Use this function to perform any cleanup, logging, or disposing of resources used\r\n   * by the action. This is the last function called during the pipeline.\r\n   */\r\n  finish() {\r\n    console.log('Finish action.');\r\n  }\r\n\r\n  /**\r\n   * Implement this function to perform validation of business rules and data.\r\n   */\r\n  validateAction() {\r\n    console.log('Validating the action.');\r\n    return this.validationContext;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;AAAA;;;YAIC,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,+BAA+B,EAAE,YAAY,CAAC;aACzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACND;;;;;;;;;;;;;;;;;;;;AAyBA;;;;IAsBE;;;;;;8BAhBiB,IAAI;;;;kCAK2B,IAAI,iBAAiB,EAAE;;;;;4BAM1C,YAAY,CAAC,OAAO;KAKjC;;;;;IAKhB,IAAI,iBAAiB;QACnB,OAAO,IAAI,CAAC,kBAAkB,CAAC;KAChC;;;;;;;IAOD,OAAO;QACL,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QAC5C,IAAI,CAAC,qBAAqB,EAAE,CAAC;KAC9B;;;;;IAKO,qBAAqB;QAC3B,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;QACD,IAAI,CAAC,YAAY,EAAE,CAAC;;;;;;;IAOd,WAAW;QACjB,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAChC,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,gBAAgB,EAAE,CAAC;;;;;;IAMlB,YAAY;QAClB,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QACjC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,MAAM,EAAE,CAAC;;;;;;;;;;IAUR,aAAa;QACnB,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAClC,IAAI,CAAC,aAAa,EAAE,CAAC;;;;;;;;IAQvB,aAAa;QACX,MAAM,IAAI,KAAK,CACb,8DAA8D,CAC/D,CAAC;KACH;;;;;;IAMD,KAAK;QACH,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;KACjC;;;;;;IAMD,KAAK;QACH,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;KACjC;;;;;;IAMD,iBAAiB;QACf,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;KACvC;;;;;;IAMD,aAAa;QACX,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;QACxC,uBAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACtC,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,iBAAiB,CAAC,KAAK,GAAG,sBAAsB,CAAC,OAAO,CAAC;SAC/D;aAAM;YACL,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAC5B,IAAI,CAAC,iBAAiB,CAAC,KAAK,GAAG,sBAAsB,CAAC,OAAO,CAAC;SAC/D;KACF;;;;;;IAMD,kBAAkB;QAChB,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;KAC3C;;;;;IAKD,gBAAgB;QACd,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;KACzC;;;;;;IAMD,iBAAiB;QACf,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;KACzC;;;;;;IAMD,oBAAoB;QAClB,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;KACxE;;;;;;IAMD,MAAM;QACJ,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;KAC/B;;;;;IAKD,cAAc;QACZ,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC,iBAAiB,CAAC;KAC/B;CACF;;;;;;;;;;;;;;"}
